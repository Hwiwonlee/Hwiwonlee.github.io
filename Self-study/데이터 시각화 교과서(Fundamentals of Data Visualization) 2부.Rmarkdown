---
title: "데이터 시각화 교과서(Fundamentals of Data Visualization) 2부"
author: "Hwiwon Lee"
date: "`r format(Sys.Date())`"
categories:
  - visualization
tags:
  - R
  - visualization
output: 
  # https://blog.zarathu.com/posts/2019-01-03-rmarkdown/
    bookdown::html_document2:
      fig_retina : 1
      number_sections: FALSE
      fig_caption: TRUE
      fig_height: 6
      fig_width: 10
      highlight: textmate
      theme: cosmo
      toc: yes
      toc_depth: 4
      toc_float: yes
      css: "post_style.css"
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.height = 8, fig.align = "center", cache=T, dpi = 300, dev = "png",
                      comment = "#>")

# https://tibble.tidyverse.org/reference/formatting.html
options(tibble.print_max = 10)
options(tibble.max_extra_cols = 5)
# options(max.print = 300)

library(knitr) # for include_graphics()
library(tidyverse) # as you known, core package
library(googledrive) # Import dataset from the google drive
library(readr) # To read csv file
library(lubridate)
library(operators)
library(magrittr)
library(ggridges) # geom_density_line()을 위한 패키지 로드
library(tinter) # darken()을 위한 패키지 로드
library(pkgsimon) # theme_dviz_hgrid()를 위함
library(showtext)
font_add_google('Noto Sans KR', 'notosanskr')
font_add_google('Noto Sans', 'notosans')
font_add_google('Nanum Gothic', 'nanumgothic')
library(ggforce) # sina plot을 위한 패키지 
# library(dviz.supp) # colorblindr가 4.0.2에서 사용 불가해서 설치가 안됨 
library(foreign)
library(treemapify) # geom_treemap
library(ggrepel) # geom_text_repel
library(ggfortify) # auto_plot for PCA plot 


library(gapminder)
library(colorspace)
library(gridExtra)
library(cowplot) # for axis_canvas
```


# Principle of figure design

## ch 17 잉크 양 비례의 원칙

**잉크 양 비례의 원칙**(principle of proportinal ink)라는 다소 낯선 개념이 등장한다. 정의는 아래와 같다. 

> The principle of proportional ink: The sizes of shaded areas in a visualization need to be proportional to the data values they represent(색조를 넣은 영역이 수치 값을 나타낼 때, 색조가 들어간 영역의 면적은 해당 값과 정비례해야 한다).

번역본의 주석에 따르면 원래의 정의는 이렇다고 한다. 

> The representation of numbers, as physically measured on the surface of the graphic itself, should be directly proportional to the numerical quantities represented(그래픽 자체의 표면에 숫자를 물리적으로 표현하는 경우, 수치의 크기와 표면적의 넓이는 정비례해야 한다). 


잉크 양 비례의 원칙이라는 말이 와닿지 않아서 그렇지 의미를 보면 그래프를 그리는 사람들 모두가 알고 있는 사실이다. **숫자와 면적이 정비례하게 그릴 것.** 잉크 양 비례의 원칙을 위배한 유명한 예시가 있다.

```{r wrong-pie-chart, echo = FALSE, fig.cap = "JTBC의 유명한 파이차트. 숫자와 해당 카테고리를 의미하는 면적이 일치하지 않으며 심지어 비례하지도 않는다."}
include_graphics("https://www.mediawatch.kr/data/photos/20170312/art_14899947314124_cfb2da.jpg")
```

JTBC 뉴스룸에서 방송된 파이차트([출처](https://www.mediawatch.kr/news/article.html?no=251671))로 대단히 놀라운 수준의 시각화를 보여준다. `잘했다`, `모르겠다`, `잘못했다` 세 범주로 나눠진 설문조사 응답은 차례대로 `64.0%`, `28.7%`, `7.3%`이지만 그래프의 면적은 `잘했다 >= 잘못했다 > 모르겠다`로 보인다. 이 파이차트에서 정확한 것은 설문조사의 응답 범주 뿐이고 나머지는 모두 틀렸다고 봐도 무방하다. 

이렇게 그리지 말라는 것이다. 

책에서는 대부분의 사람들이 한 번 정도는 실수했던 부분에 대해서도 얘기한다. **그래프 축의 시작은 반드시 0이어야 한다.**가 바로 그것이다. 물론, 목적이나 분야에 따라 시작점이 **반드시** 0이 되지 않아도 되는 경우가 있긴 하다. 가령 주가를 다룬 시계열 그래프나 대중 매체에서 사용되는 그래프들이 그렇다. 

하지만 그래프의 축이 0부터 시작하지 않는다면 시각화의 왜곡은 반드시 일어난다. 책에 나온 경우를 표현하기 위해 `gapminder` 데이터셋의 인구 수
를 사용해보았다. 

```{r wrong-bar-plot, fig.cap="2007년 기준 인구 수(백만 명 단위)"}
gapminder %>% 
  filter(continent == "Asia", 
         year == "2007") %>% 
  mutate(pop_million = pop / 1000000) %>% 
  filter(between(pop_million, 20, 60)) %>% 
  
  ggplot(aes(x = country, y = pop_million)) + 
  geom_col(fill = "#FF9436") + 
  coord_cartesian(ylim = c(20, 55), expand = FALSE) + 
  scale_y_continuous(
    name = "Population per million", 
    breaks = c(20, 10*(3:5))
  ) + 
  scale_x_discrete(
    name = "Country"
  ) + 
  theme_minimal() + 
  theme(
    text = element_text(family = "notosanskr", size = 12), 
    plot.margin = margin(14, 7, 3, 1.5)
  )
```

```{r right-bar-plot, fig.cap="2007년 기준 인구 수(백만 명 단위)"}
gapminder %>% 
  filter(continent == "Asia", 
         year == "2007") %>% 
  mutate(pop_million = pop / 1000000) %>% 
  filter(between(pop_million, 20, 60)) %>% 
  
  ggplot(aes(x = country, y = pop_million)) + 
  geom_col(fill = "#FF9436") + 
  coord_cartesian(ylim = c(0, 55), expand = FALSE) + 
  scale_y_continuous(
    name = "Population per million", 
    breaks = c(0, 10*(1:5))
  ) + 
  scale_x_discrete(
    name = "Country"
  ) + 
  theme_minimal() + 
  theme(
    text = element_text(family = "notosanskr", size = 12), 
    plot.margin = margin(14, 7, 3, 1.5)
  )
```

2007년 기준 11 개 국가의 인구 수를 bar plot으로 나타냈다. y축의 시작이 20부터 시작이냐 0부터 시작이냐에 따라 인구 수를 의미하는 bar의 너비가 크게 차이 남을 볼 수 있다. 

시각화는 사실을 간결하지만 분명하게 전달해야 할 필요가 있으므로 위와 같은 왜곡이 발생하지 않도록, 다시 말해 잉크 양 비례 원칙이 지켜질 수 있도록 주의해야 함을 기억하자.  

## ch 18 오버플로팅 : 겹치는 점을 처리하는 방법

x축이나 y축에 명목형 변수를 두고 산점도를 그리면 많은 경우 관측치를 표현하는 점들이 겹치게 되어 오해를 불러올 수 있다. `ggplot2` 패키지나 `base`에서 볼 수 있는 `jitter()`를 이용하면 겹쳐진 점을 살짝 비껴 표현할 수 있어 plot의 왜곡을 방지할 수 있다. 

책에서 소개하고 있는 방법 중 인상깊었던 것은 **2차원 히스토그램**으로 산점과 점들의 분포를 동시에 표현할 수 있는 방법이라는 생각이 들었다. 



```{r nycfilghts13-2d-hist, fig.cap="2차원 히스토그램을 이용한 분 단위 도착 시간 지연과 실제 도착 시간의 비교"}
library(nycflights13)

nycflights13::flights %>%
  filter(!is.na(arr_time)) %>% 
  mutate(arr_time = as.character(arr_time)) %>% 
  mutate(arr_time = 
           ifelse(
             arr_time == "2400",
             "0000",
             arr_time
           )
  ) %>% 
  mutate(arrive_time = 
           case_when(
             str_length(arr_time) == 1 ~ paste0("000", arr_time), 
             str_length(arr_time) == 2 ~ paste0("00", arr_time), 
             str_length(arr_time) == 3 ~ paste0("0", arr_time), 
             str_length(arr_time) == 4 ~ arr_time
           )
  ) %>% 
  
  mutate(arrive_time = parse_time(arrive_time, format = "%H%M")) %>% 

  ggplot(aes(x = arrive_time, y = arr_delay)) +
  geom_abline(slope = 0, intercept = 0, color="grey70") + 
  scale_x_time(
    name = "실제 도착 시각",
    breaks = hm(c("0:00", "6:00", "12:00", "18:00", "24:00")),
    labels = c("0:00", "6:00", "12:00", "18:00", "24:00")
  ) +
  scale_y_continuous(
    name = "도착 지연 시간(분)"
  ) + 
  geom_hex(aes(colour = stat(count)), bins = 100) + 
  scale_fill_continuous_sequential(
    aesthetics = c("colour", "fill"),
    h1 = -83, h2 = 20, c1 = 30, cmax = 40, c2 = 0, l1 = 20, l2 = 94, p1 = 1, p2 = 1.2, 
    rev = TRUE,
    begin = 0.2,
    name = "실제 도착시간의 빈도"
  ) +
  theme_minimal() + 
  theme(
    legend.position = c(0.85, .85), 
    legend.background = element_rect(color="white"),
    text = element_text(family = "notosanskr", size = 12)
    )
```

bins의 모양을 사각형으로 하느냐, 육각형으로 하느냐는 사실 aesthetic의 의미만 있는 줄 알았는데, 책에 다음과 같은 사실이 나온다. 

> This approach, first proposed by Carr et al. ([1987](https://www.jstor.org/stable/2289444)), has the advantage that the points in a hexagon are, on average, closer to the hexagon center than the points in an equal-area square are to the center of the square. Therefore, the colored hexagon represents the data slightly more accurately than the colored rectangle does.

색칠된 육각형이 직사각형에 비해 데이터를 조금 더 정확하게 나타내주는 측면이 있다는 사실이 굉장히 인상깊다. 꼭 기억하자. 


## ch 19 효과적인 색 사용을 위한 조언

여러 색깔을 사용한 그래프는 언뜻 보면 뭔가 있어 보이지만 명확한 의미전달이 힘든 경우가 보통이다. 따라서 지나치게 많은 색깔을 사용하는 것은 지양되어야 하는 것이 마땅하다. 

책에서는 특별히 색맹/색약의 불편함을 가진 사람들을 위한 색 사용을 조언한다. 대부분의 색맹/색약이 녹색, 적색, 청색 인식에 대한 불편을 가져오므로 해당 색깔들은 한 번씩만 사용하길 권장하고 있으며 특별히 정성적 색상(Qualitative color)의 경우, 색맹/색약에 영향을 받지 않는 다음의 색깔을 사용하는 것을 추천했다. 

```{r}
# `colorblindr`이 4.0.2에서 아직 사용할 수 없으므로 새로운 패키지를 사용해서 표현
# https://cran.r-project.org/web/packages/unikn/vignettes/colors.html
library(unikn)
forcolorblind <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
names(forcolorblind) <- c("주황색", "하늘색", "초록색", "노란색", "파란색", "주홍색", "분홍색", "검은색")

seecol(forcolorblind, grid = FALSE, title = " ")
```

## ch 20 Redundant coding(담백한 디자인의 그래프)

**Redundant coding**는 보통 중복된 코드 디자인을 말하는데...이걸 번역본에서는 **불필요한 기호화**...라고 해놓았다. 원본이랑 번역본을 같이 보는데 종종 **어?**하는 번역이 있었지만 이건 좀...

이번 장에서는 의미 전달을 위한 최적화를 소개한다. 이전 장에서 보았던 색맹/색약의 경우를 대처하기 위한 **색각 이상 시뮬레이션**(Color-vision-deficiency simulation)과 효과적인 범례 표시 및 범례 없는 그래프 등을 보여준다. 

범례 없는 그래프는 무작정 범례를 지우는 것이 아니라 범례에서 전달하는 정보를 그래프에서 전달해 전체적인 통일감과 명확한 표현, 두 마리 토끼를 모두 잡을 수 있는 방법이다. 

그렇긴 한데...사실 실무에서는 그렇게 선호되는 방법은 아닌 것 같다는 게 내 의견이다. 보기엔 좋은데 결정권자의 손을 넘기 힘들다고 해야할까. 내 맘에 드는 그래프보다는 모두가 읽고 이해하기 좋은 그래프를 만드는 것이 더 옳은 일이므로 유연한 사고를 가지는 게 좋은 것 같다. 

```{r}
label_df <- data.frame(
  Species = c("setosa", "virginica", "versicolor"),
  label = c("세토사 붓꽃", "버지니카 붓꽃", "버시컬러 붓꽃"),
  Sepal.Length = c(5, 7, 6),
  Pepal.Length = c(0.7, 6.8, 3.5),
  hjust = c(0, 0.5, 0),
  vjust = c(0, 0.5, 1))

iris %>% 
  ggplot(aes(x = Sepal.Length,y = Petal.Length,
             color = Species)
  ) + 
  geom_point(
    aes(shape = Species, fill = Species),
    size = 2.5,
    position = position_jitter(
      width = 0.05,
      height = 0.05,
      seed = 1234)
  ) +
  stat_ellipse(size = 0.5) +
  scale_shape_manual(
    values = c(21, 22, 23),
    breaks = c("setosa", "virginica", "versicolor"),
    name = NULL
  ) +
  scale_fill_manual(
    values = c("#D55E0080", "#0072B280", "#009E7380"),
    breaks = c("setosa", "virginica", "versicolor"),
    name = NULL
  ) +
  scale_color_manual(
    values = darken(c("#D55E00", "#0072B2", "#009E73"), 0.3),
    breaks = c("setosa", "virginica", "versicolor"),
    name = NULL
  ) +
  scale_x_continuous(
    limits = c(4, 8.2), expand = c(0, 0),
    breaks = seq(4, 8, 2),
    labels = as.character(seq(4, 8, 2)),
    name = "꽃받침 길이"
  ) +
  scale_y_continuous(
    limits = c(0, 7.5), expand = c(0, 0),
    breaks = seq(0, 7, 1),
    labels = as.character(seq(0, 7, 1)),
    name = "꽃잎 길이"
  ) +
  guides(fill = "none", color = "none", shape = "none") +
  geom_text(
    data = label_df,
    aes(
      x = Sepal.Length, y = Pepal.Length, label = label, color = Species,
      hjust = hjust, vjust = vjust
    ),
    size = 14/.pt,
    fontface = "italic",
    inherit.aes = FALSE
  ) +
  theme_minimal() + 
  theme(
    text = element_text(family = "notosanskr",
                        size = 12)
  ) -> no_legend_SL_PL

iris %>% 
  ggplot(aes(x = Sepal.Length,y = Petal.Length,
             color = Species)
  ) + 
  geom_point(
    aes(shape = Species, fill = Species),
    size = 2.5,
    position = position_jitter(
      width = 0.05,
      height = 0.05,
      seed = 1234)
  ) +
  stat_ellipse(size = 0.5) +
  scale_shape_manual(
    values = c(21, 22, 23),
    breaks = c("setosa", "virginica", "versicolor"),
    labels = c("세토사 붓꽃", "버지니카 붓꽃", "버시컬러 붓꽃"),
    name = NULL
  ) +
  scale_fill_manual(
    values = c("#D55E0080", "#0072B280", "#009E7380"),
    breaks = c("setosa", "virginica", "versicolor"),
    labels = c("세토사 붓꽃", "버지니카 붓꽃", "버시컬러 붓꽃"),
    name = NULL
  ) +
  scale_color_manual(
    values = darken(c("#D55E00", "#0072B2", "#009E73"), 0.3),
    breaks = c("setosa", "virginica", "versicolor"),
    labels = c("세토사 붓꽃", "버지니카 붓꽃", "버시컬러 붓꽃"),
    name = NULL
  ) +
  scale_x_continuous(
    limits = c(4, 8.2), expand = c(0, 0),
    breaks = seq(4, 8, 2),
    labels = as.character(seq(4, 8, 2)),
    name = "꽃받침 길이"
  ) +
  scale_y_continuous(
    limits = c(0, 7.5), expand = c(0, 0),
    breaks = seq(0, 7, 1),
    labels = as.character(seq(0, 7, 1)),
    name = "꽃잎 길이"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom", 
    text = element_text(family = "notosanskr",
                        size = 12)
  ) -> yes_legend_SL_PL


grid.arrange(yes_legend_SL_PL, no_legend_SL_PL, nrow = 2)

```
```{r}
iris %>% 
  ggplot(aes(x = Petal.Length, 
             color = Species, 
             fill = Species)) +
  geom_density(alpha = 0.3) + 
  scale_fill_manual(
    values = c("#D55E0080", "#0072B280", "#009E7380"),
    breaks = c("setosa", "virginica", "versicolor"),
    labels = c("세토사 붓꽃", "버지니카 붓꽃", "버시컬러 붓꽃"),
    name = NULL
  ) + 
  scale_color_manual(
    values = darken(c("#D55E00", "#0072B2", "#009E73"), 0.3),
    breaks = c("setosa", "virginica", "versicolor"),
    labels = c("세토사 붓꽃", "버지니카 붓꽃", "버시컬러 붓꽃"),
    name = NULL
  ) + 
  labs(x = "꽃잎 길이", y = "밀도") + 
  theme_minimal() +
  theme(
    legend.position = "bottom", 
    text = element_text(family = "notosanskr",
                        size = 12)
  )
```


```{r}
# Sepal Length에 해당하는 x축의 분포를 density로 정리
group_by(iris, Species) %>%
  do(ggplot2:::compute_density(.$Sepal.Length, NULL)) %>%
  rename(Sepal.Length = x) -> iris_SL_dens

# Petal Length에 해당하는 y축의 분포를 density로 정리
group_by(iris, Species) %>%
  do(ggplot2:::compute_density(.$Petal.Length, NULL)) %>%
  rename(Petal.Length = x) -> iris_PL_dens

# 각 density의 limit를 저장
dens_limit <- max(iris_SL_dens$density, iris_PL_dens$density) * 1.05 # upper limit of density curves

# density plot 안에 붓꽃 종류를 적기 위한 iris_max 생성
iris_max <- 
  filter(iris_SL_dens, density == max(density)) %>%
  ungroup() %>%
  mutate(
    hjust = c(1, 1, 1),
    vjust = c(-0.8, -0.8, -0.8),
    nudge_x = c(0.11, 0, 0.24),
    nudge_y = c(-0.02, 0.02, -0.02),
    label = c("세토사 붓꽃", "버지니카 붓꽃", "버시컬러 붓꽃")
  )
```

```{r}
xdens <- axis_canvas(yes_legend_SL_PL, axis = "x") +
  geom_density_line(
    data=iris_SL_dens,
    aes(x = Sepal.Length, y = density, fill = Species, color = Species),
    stat = "identity", size = .2
  ) +
  geom_text(
    data = iris_max,
    aes(
      label = label, hjust = hjust, vjust = vjust, color = Species,
      x = Sepal.Length + nudge_x, 
      y = density + nudge_y
    ),
    ize = 12/.pt, 
    #color = "black", inherit.aes = FALSE,
    fontface = "italic"
  ) +
  scale_color_manual(
    values = darken(c("#D55E00", "#0072B2", "#009E73"), 0.3),
    breaks = c("setosa", "virginica", "versicolor"),
    labels = c("세토사 붓꽃", "버지니카 붓꽃", "버시컬러 붓꽃"),
    guide = "none"
  ) +
  scale_fill_manual(
    values = darken(c("#D55E0080", "#0072B280", "#009E7380")),
    breaks = c("setosa", "virginica", "versicolor"),
    labels = c("세토사 붓꽃", "버지니카 붓꽃", "버시컬러 붓꽃"),
    guide = "none"
  ) +
  scale_y_continuous(limits = c(0, dens_limit), expand = c(0, 0))


ydens <- axis_canvas(yes_legend_SL_PL, axis = "y", coord_flip = TRUE) +
  geom_density_line(
    data = iris_PL_dens,
    aes(x = Petal.Length, y = density, fill = Species, color = Species),
    stat = "identity", size = .2
  )  +
  scale_color_manual(
    values = darken(c("#D55E00", "#0072B2", "#009E73"), 0.3),
    breaks = c("setosa", "virginica", "versicolor"),
    labels = c("세토사 붓꽃", "버지니카 붓꽃", "버시컬러 붓꽃"),
    guide = "none"
  ) +
  scale_fill_manual(
    values = darken(c("#D55E0080", "#0072B280", "#009E7380")),
    breaks = c("setosa", "virginica", "versicolor"),
    labels = c("세토사 붓꽃", "버지니카 붓꽃", "버시컬러 붓꽃"),
    guide = "none"
  ) +
  scale_y_continuous(limits = c(0, dens_limit), expand = c(0, 0)) +
  coord_flip()
```

```{r}

p1 <- insert_xaxis_grob(
  yes_legend_SL_PL + theme(legend.position = "none"),
  xdens,
  # desity plot의 크기 설정 
  grid::unit(2*45, "pt"), position = "top"
)

p2 <- insert_yaxis_grob(p1, 
                        ydens, 
                        grid::unit(3*35, "pt"), # desity plot의 크기 설정 
                        position = "right")

ggdraw(p2)
```

## ch 21 여러 개의 패널로 구성된 도표
다중 패널의 도표에서 가장 중요한 것은 통일성이다. 보통 `factor`로 선언된 명목형 변수를 사용해서 패널을 나누는데, 나눠진 패널의 x축과 y축의 범위, 색깔이나 모양의 aesthetic 요소가 모두 통일성이 있어야 한다. 


```{r}
set.seed(1234)
index_sample <- sample(seq(1, 46, 1),9)

txhousing %>% 
  # dplyr::count(city) # 46개의 도시
  # distinct(year) # 00년부터 15년까지
  # dplyr::count(month) # 00년 1월부터 15년 7월까지
  # group_by(city) %>% dplyr::count(city) # 46개의 도시 각각 187개의 row
  mutate(across(everything(), ~replace_na(.x, 0))) %>% # NA value를 0으로 대체
  mutate(ym = parse_date(paste0(year, "-" ,month), format = "%Y-%m")) %>% 
  
  # 같은 시기의 volume을 percent로 환산
  group_by(ym) %>% 
  mutate(per_volume = volume/sum(volume)) %>% ungroup() %>%
  
  mutate(index = rep(seq(1, 46), each = 187)) %>% select(index, city, year, month, ym, per_volume, everything()) %>% 
  filter(index %in% index_sample) %>% 
  group_by(city) %>% 
  ggplot(aes(x = ym, y = per_volume)) +
  geom_line(color = "#FF8000") + 
  labs(x = " ",
       y = "전체 주택 거래 가격의 비율") + 
  facet_wrap(~city, labeller = label_wrap_gen(width = 25), scales = "free") + 
  theme_minimal() -> dif_y_scale


txhousing %>% 
  mutate(across(everything(), ~replace_na(.x, 0))) %>%
  mutate(ym = parse_date(paste0(year, "-" ,month), format = "%Y-%m")) %>% 
  group_by(ym) %>% 
  mutate(per_volume = volume/sum(volume)) %>% ungroup() %>%
  mutate(index = rep(seq(1, 46), each = 187)) %>% select(index, city, year, month, ym, per_volume, everything()) %>% 
  filter(index %in% index_sample) %>% 
  group_by(city) %>% 
  ggplot(aes(x = ym, y = per_volume)) +
  geom_line(color = "#FF8000") + 
  facet_wrap(~city, labeller = label_wrap_gen(width = 25)) +
  scale_y_continuous(
    expand = c(0, 0),
    breaks = seq(0, 0.3, 0.05),
    name = "전체 주택 거래 가격의 비율",
    labels = scales::percent_format(accuracy = 1)
  ) + 
  xlab(" ") +
  theme_minimal() -> same_y_scale

grid.arrange(dif_y_scale, same_y_scale, nrow = 1)
```
`ggplot2`패키지에 있는 `txhousing` dataset을 이용한 플롯이다. x축은 연월, y축은 전체 주택 거래 가격에서 각 도시가 차지하는 비율을 의미한다. y축의 값이 `0`인 경우는 결측치를 0으로 대체했기 때문이다. 두 플롯의 차이는 **y축이 통일되어 있느냐**에 있다. 왼쪽 플롯이 드라마틱한 변화를 보이고 있지만 y축의 라벨을 보면 대부분의 도시가 갖는 전체 주택 거래 가격의 비율은 매우 작은 수준인 것을 알 수 있다. 오른쪽 플롯은 y축에 대한 큰 값을 갖는 도시 기준으로 y축이 통일되어 있기 때문에 다소 밋밋한 플롯처럼 보인다. 

앞서 축의 단위에 통일성이 있어야 한다고 했는데 그렇다면 반드시 오른쪽의 플롯처럼 그려야 할까? 

대부분의 경우, **반드시**혹은 **무조건**이란 말이 붙으면 틀린 말이 되듯 이 경우에도 목적에 따라 다르므로 왼쪽 플롯이 의미가 없는 플롯은 아니다. 

왼쪽 플롯의 의미는 subplot의 factor인 도시 내(within) 전체 주택 가격 비율의 변화를 볼 수 있다는 점이고 오른쪽 플롯의 의미는 도시 간(between) 전체 주택 가격 비율의 변화를 볼 수 있다는 점이다. 즉, 도시 내 변화를 보이고 싶다면 왼쪽 플롯을 그릴 수 있다. 

그러나 원론적으로 축의 단위를 통일하는 것이 더 좋으므로 subplot의 factor들 사이의 값이 크게 차이나는 경우에, 그러니까 위와 같은 경우는 x축이나 y축에 대한 일정 기준을 두고 먼저 도시를 범주화(categorization)해 **통일할 수 있는 환경**을 먼저 만들어두고 나눠 그리는 것이 더 좋다. 

예를 들어, 주택 거래 총 가격의 비율의 중간값을 기준으로 1% 미만, 5% 미만, 15% 미만, 15% 이상 정도로만 나눈다면 y축을 통일해도 어느 정도의 변화량이 플롯에 표시될 것이다. 


```{r}
txhousing %>% 
  mutate(across(everything(), ~replace_na(.x, 0))) %>%
  mutate(ym = parse_date(paste0(year, "-" ,month), format = "%Y-%m")) %>% 
  
  group_by(ym) %>% 
  mutate(per_volume = volume/sum(volume)) %>% ungroup() %>%
  
  group_by(city) %>% 
  mutate(per_category = 
           factor(
             case_when(
               median(per_volume) < 0.01 ~ "1% 미만",
               median(per_volume) < 0.05 ~ "5% 미만",
               median(per_volume) < 0.15 ~ "15% 미만",
               median(per_volume) >= 0.15 ~ "15% 이상"
             ), 
            levels = c("1% 미만", "5% 미만", "15% 미만", "15% 이상")
           )
  ) %>% ungroup() %>% 
  mutate(index = rep(seq(1, 46), each = 187)) %>% select(index, per_category, city, year, month, ym, per_volume, everything()) %>% 
  filter(per_category == "1% 미만") %>% 
  group_by(city) %>% 
  ggplot(aes(x = ym, y = per_volume)) +
  geom_line(color = "#FF8000") + 
  facet_wrap(~city, labeller = label_wrap_gen(width = 25)) +
  scale_y_continuous(
    expand = c(0, 0),
    # breaks = seq(0, 0.3, 0.05),
    name = "전체 주택 거래 가격의 비율",
    labels = scales::percent_format(accuracy = 0.1)
  ) + 
  xlab(" ") +
  theme_minimal() + 
  ggtitle("a) 전체 주택 거래 가격의 비율의 중간값이 1% 미만인 도시들") + 
  theme(title = element_text(size = 14))-> less_1

txhousing %>% 
  mutate(across(everything(), ~replace_na(.x, 0))) %>%
  mutate(ym = parse_date(paste0(year, "-" ,month), format = "%Y-%m")) %>% 
  
  group_by(ym) %>% 
  mutate(per_volume = volume/sum(volume)) %>% ungroup() %>%
  
  group_by(city) %>% 
  mutate(per_category = 
           factor(
             case_when(
               median(per_volume) < 0.01 ~ "1% 미만",
               median(per_volume) < 0.05 ~ "5% 미만",
               median(per_volume) < 0.15 ~ "15% 미만",
               median(per_volume) >= 0.15 ~ "15% 이상"
             ), 
            levels = c("1% 미만", "5% 미만", "15% 미만", "15% 이상")
           )
  ) %>% ungroup() %>% 
  mutate(index = rep(seq(1, 46), each = 187)) %>% select(index, per_category, city, year, month, ym, per_volume, everything()) %>% 
  filter(per_category == "5% 미만") %>% 
  group_by(city) %>% 
  ggplot(aes(x = ym, y = per_volume)) +
  geom_line(color = "#FF8000") + 
  facet_wrap(~city, labeller = label_wrap_gen(width = 25)) +
  scale_y_continuous(
    expand = c(0, 0),
    # breaks = seq(0, 0.3, 0.05),
    name = "전체 주택 거래 가격의 비율",
    labels = scales::percent_format(accuracy = 0.1)
  ) + 
  xlab(" ") +
  theme_minimal() + 
  ggtitle("b) 전체 주택 거래 가격의 비율의 중간값이 5% 미만인 도시들") + 
  theme(title = element_text(size = 14))-> less_5

txhousing %>% 
  mutate(across(everything(), ~replace_na(.x, 0))) %>%
  mutate(ym = parse_date(paste0(year, "-" ,month), format = "%Y-%m")) %>% 
  
  group_by(ym) %>% 
  mutate(per_volume = volume/sum(volume)) %>% ungroup() %>%
  
  group_by(city) %>% 
  mutate(per_category = 
           factor(
             case_when(
               median(per_volume) < 0.01 ~ "1% 미만",
               median(per_volume) < 0.05 ~ "5% 미만",
               median(per_volume) < 0.15 ~ "15% 미만",
               median(per_volume) >= 0.15 ~ "15% 이상"
             ), 
            levels = c("1% 미만", "5% 미만", "15% 미만", "15% 이상")
           )
  ) %>% ungroup() %>% 
  mutate(index = rep(seq(1, 46), each = 187)) %>% select(index, per_category, city, year, month, ym, per_volume, everything()) %>% 
  filter(per_category == "15% 미만") %>% 
  group_by(city) %>% 
  ggplot(aes(x = ym, y = per_volume)) +
  geom_line(color = "#FF8000") + 
  facet_wrap(~city, labeller = label_wrap_gen(width = 25)) +
  scale_y_continuous(
    expand = c(0, 0),
    # breaks = seq(0, 0.3, 0.05),
    name = "전체 주택 거래 가격의 비율",
    labels = scales::percent_format(accuracy = 0.1)
  ) + 
  xlab(" ") +
  theme_minimal() + 
  ggtitle("c) 전체 주택 거래 가격의 비율의 중간값이 15% 미만인 도시들") + 
  theme(title = element_text(size = 14))-> less_15

txhousing %>% 
  mutate(across(everything(), ~replace_na(.x, 0))) %>%
  mutate(ym = parse_date(paste0(year, "-" ,month), format = "%Y-%m")) %>% 
  
  group_by(ym) %>% 
  mutate(per_volume = volume/sum(volume)) %>% ungroup() %>%
  
  group_by(city) %>% 
  mutate(per_category = 
           factor(
             case_when(
               median(per_volume) < 0.01 ~ "1% 미만",
               median(per_volume) < 0.05 ~ "5% 미만",
               median(per_volume) < 0.15 ~ "15% 미만",
               median(per_volume) >= 0.15 ~ "15% 이상"
             ), 
            levels = c("1% 미만", "5% 미만", "15% 미만", "15% 이상")
           )
  ) %>% ungroup() %>% 
  mutate(index = rep(seq(1, 46), each = 187)) %>% select(index, per_category, city, year, month, ym, per_volume, everything()) %>% 
  filter(per_category == "15% 이상") %>% 
  group_by(city) %>% 
  ggplot(aes(x = ym, y = per_volume)) +
  geom_line(color = "#FF8000") + 
  facet_wrap(~city, labeller = label_wrap_gen(width = 25)) +
  scale_y_continuous(
    expand = c(0, 0),
    # breaks = seq(0, 0.3, 0.05),
    name = "전체 주택 거래 가격의 비율",
    labels = scales::percent_format(accuracy = 0.1)
  ) + 
  xlab(" ") +
  theme_minimal() + 
  ggtitle("d) 전체 주택 거래 가격의 비율의 중간값이 30%미만인 도시들") + 
  theme(title = element_text(size = 14)) -> less_30
```

```{r, fig.width=16, fig.height=12, fig.cap="전체 주택 거래 가격의 비율과 시기에 따른 추세"}
grid.arrange(less_1, less_5, less_15, less_30, 
                      layout_matrix = rbind(c(1,1,1,1,3,3,3),
                                            c(1,1,1,1,3,3,3),
                                            c(2,2,2,2,4,4,4),
                                            c(2,2,2,2,4,4,4))
)

```

## ch 22 제목, 캡션, 표의 효과적 활용
## ch 23 데이터 이해를 돕는 시각화의 주변 요소(그리드)
## ch 24 축 레이블의 글자는 큼직하게

플롯을 그릴 때 쉽게 등한시 되는 요소들을 다룬 파트를 묶어보았다. 이전의 플롯들을 보면 알겠지만 나도 제목이나 그리드, 축 레이블 보단 데이터의 표현에 중점을 두고 그리는 경우가 훨씬 많고 실제로도 위 요소들의 중요성이 낮다고 생각한다. 그러나 **완전한 플롯**을 추구한다면 제목, 그리드, 축 레이블 역시 빼놓을 수 없는 요소들이다. 

**제목**은 R로 플롯을 그릴 때 의외로 쉽게 생략되는 요소 중 하나다. R을 활용해 문서 작성을 하지 않는 경우, 플롯은 어차피 그림파일로 변환되어 문서작성 프로그램을 통해 추가될 것이고 그림인 플롯에 타이틀을 따로 추가하는 것이 작업상 더 쉬울 수 있기 때문이다. 즉, 추가를 못하는 게 아니라 안하는 것이다. 그러나 모두가 알고 있듯, 플롯에는 제목이 반드시 필요하다. 

캡션은 문서의 목적이나 양식에 따라 생략할 수 있는 요소이다. `labs()`의 `captions` arg로 넣을 수 있다. 

대부분의 플롯에는 그물 격자가 기본 설정되어 있지만 간혹 이 무늬가 지저분하다고 지우는 경우를 보았다. 요소를 지웠으니 플롯은 당연히 깔끔해보이겠지만 점이나 선의 위치를 파악하기 어렵다는 단점이 있으니 왠만하면 지우지 않는 것이 더 좋다. 더하여 플롯이나 범례 테두리는 지우는 것이 좀 더 좋아보이니 격자 대신 테두리를 지우자. 

**쌍 데이터** 파트에서 x와 y가 짝 지은 데이터(paired data)인 경우, 저자는 x와 y의 관계를 나타내기 위한 대각선을 남기고 그물 격자무늬를 지우는 게 더 좋다고 하는데 난 관계성과 플롯 내의 위치를 동시에 볼 수 있도록 대각선과 격자 무늬 둘 다 있어야 한다고 생각한다. 

**축 레이블** 또한 반드시 들어가야 하는 요소 중 하나이다. 특히, 축의 데이터가 로그 변환과 같은 특정한 변환을 한 상태라면 이를 반드시 명시해주어야 하며 비슷한 맥락으로 단위 또한 써주어야 한다. **큼직하게**라는 말이 모호하다면 제목보다 2포인트 낮은 수준이라고 생각하면 얼추 맞는다. 


## ch 25 선만 이용해 그린 플롯은 피해라
## ch 26 3D 플롯은 제발...

25장의 제목을 번역본에서는 *선 그림은 피하자* 라고 했던데... **line plot**과 혼돈될 여지가 있으므로 선만 이용해 그린 그림이라고 표현했다. 읽어보니 선 그림이 아닌 다른 aesthetic 요소를 배제한 선만 이용해 그린 그림을 피하자라고 한 내용이었고 원서에도 *Avoid line drawings* 이었으니 아마 내가 생각한 의미가 맞을 것이다. 

25장과 26장은 특별히 피해야할 플롯 스타일에 대해 설명하고 있다. *선만 이용해 그린 그림* 이란 색깔이나 모양 등의 다른 꾸밈 요소 없이 오로지 선만 이용해 그린 그림으로 누구나 보게 된다면 "이건 좀...."이라고 생각할 수 있는 그림이다. 성의도 없을 뿐더러 선만 이용한다면 충분한 정보를 표현하기도 부족하다. 

3D 플롯은 있어보이지만 실속은 없는 경우가 많기 때문에 오히려 그리지 않는 편이 좋을 수도 있는 플롯이다. 2차원 공간에 표현된 3차원 플롯은 제대로 이해하기 어렵기 대문에 게시물이나 인쇄물에 포함될 플롯이라면 정말로 3D 플롯을 그리지 않는 것이 더 낫다. 

3D 플롯이 의미있는 경우라면 높이가 필요한 **지형도**나 **반응표면분석**([Response surface methodology](https://en.wikipedia.org/wiki/Response_surface_methodology), RSM)의 플롯 등이다. 물론 이것들도 2D 플롯으로 충분히 그릴 수 있는 방법들이 이미 존재한다. 

```{r 경사하강법, echo = FALSE, fig.cap = "경사하강법의 플롯. 보통, 러닝의 학습에서 최적값을 찾기 위해 사용하는 방법. 출처 : https://towardsdatascience.com/coding-deep-learning-for-beginners-linear-regression-gradient-descent-fcd5e0fc077d"}
include_graphics("https://miro.medium.com/max/699/1*mElyetzsTIJrNnKI8kTkCw.jpeg")
```

# Miscellaneous topic
Miscellaneous topic의 3개의 파트를 정리해보고자 한다. 번역서는 Miscellaneous topic...을 *시각화 레벨업을 위한 꿀팁* 으로 번역했던데...이게 꿀...팁인가? 잘 모르겠다. 원서 제목을 사용하는 것이 의미 전달에 더 좋을 것 같아 그대로 사용했다. 

## ch 27 Understanding the most commonly used image file formats(가장 흔히 쓰는 이미지 파일 형식)
앞선 챕터에서 언급한 것처럼, 대부분의 경우 R을 활용한 문서 작성을 하지 않으므로 R에서 그린 플롯을 그림파일로 저장하게 되며 특별한 경우가 아닌 이상 열에 여덟은 **png** 파일로 저장하는 것이 보통이다. 나는 학부생 때 jpeg로 저장한 파일의 해상도가 크게 상하는 것을 경험한 이후로 png파일로 저장하기 시작했다. 

저자는 **vector** 타입과 **bitmap** 타입의 구분부터 시작해 자주 사용되는 그림 파일의 형식을 설명하는 것을 시작으로 *왜 png 파일이 자주 사용되는지* 그 이유를 설명한다. 

```{r 그림파일의비교, echo = FALSE, fig.cap = "책의 Figure 27.1. a는 저장된 그림이고 b는 bitmap형식, c는 vector형식의 그림파일을 확대한  경우이다. <br />해상도 면에서 vector형식이 훨씬 좋은 것을 볼 수 있다."}
include_graphics("https://clauswilke.com/dataviz/image_file_formats_files/figure-html/bitmap-zoom-1.png")
```

vector형식의 그림파일로 저장해 사용하는 것이 매우 타당해보이지만 **용량이 매우 크다**는 vector형식 그림파일의 단점과 **저렇게 확대할 일이 없다**는 효율의 관점에서 잘 사용되지 않는다. 군대에서 전지 지도 뽑을 때, vector형식의 그림파일(pdf)이 사용되는 것을 딱 한 번 본 적 있다. 

즉, 극히 높은 수준의 해상도가 요구되는 일이 아니면 bitmap형식의 그림파일로 충분히 커버할 수 있으므로 bitmap형식의 그림파일이 선호된다. 

bitmap형식의 그림파일 중 자주 사용되는 것은 위에서 언급한대로 **png**나 **jpeg**이다. 두 그림파일 형식을 용도에 따라 구분한다면 다음과 같다. 

- **png** : 선이나 텍스트로 이뤄진 그림

- **jpeg**(jpg) : 사진

데이터 시각화로 만든 플롯은 보통 선이나 텍스트로 이뤄져 있으므로 **png**로 저장하는 것이 좋다. 사진이나 그림(정말 말 그대로의 그림!)은 **jpeg**로 저장하는 것이 좋다. 그렇다면 다양한 색깔이 들어간 플롯은 어떤 파일 형식으로 저장해야 할까? 

답은 **png**이다. R로 사진 수준의 그림을 그린 것이 아니라면 [**png**파일을 사용하는 것이 파일의 용량이나 품질 면에서 **jpeg**보다 좋기 때문이다.](https://blogchannel.tistory.com/269)

그림파일을 어떤 형태로 저장하느냐는 문제는 정말 사소한 문제처럼 보일 수 있지만 이런 디테일을 따지는 것이 취향에 맞기 때문에 재밌게 읽었던 파트라 내용이 길어졌다. 


## ch 28 올바른 시각화 소프트웨어 선택법
장(chapter)의 제목이 *올바른 시각화 소프트웨어 선택법* 이다보니 "시각화를 더 잘 할 수 있는 소프트웨어가 있는 것인가?"라고 생각했지만 **손에 익숙한 것이 최고**라고 한다. 

사실 이 장은 **데이터만 넣으면 자동으로 시각화를 해주는 상용 소프트웨어나 웹 기반 서비스에 대한 내용**이다. R로만 플롯을 그리다가 저런 사이트나 소프트웨어를 보았을 때의 놀라움은 굉장했..지만 딱 그 뿐이었다. 

저자도 **재현성(reproducibility)**과 **반복성(repeatability)**이란 개념을 들어 지적하고 있지만 저렇게 그린 플롯들은 **어떻게 그렸는지** 명확한 경우가 별로 없어서 **다시 그리기가 어려운 경우가 많다.** 

내 경우를 예로 들면 협업 연구실에서 **PCA plot**을 받은 적이 있는데 R을 활용해서 다시 그려보니 어떤 방법을 써도(normalization, scaling 포함) 똑같은 형태가 나오지 않았다. 협업 연구실의 담당 연구원에 물어보니 답변이 **그냥 그렸다.**였고... 실제로 그 분 입장에서는 버튼 몇 번이면 그냥 그려지는게 맞았다.

R이나 Python, 즉 스크립트와 코드를 이용한 플롯 그리기는 **어떻게 그림이 그려졌는가**를 포함하고 있는 경우가 많지만 버튼 하나로 그림을 그리는 상용 소프트웨어나 웹 기반 서비스들은 편의성을 택한 대신 **어떤 방법으로 그림이 그려졌는지** 쉽게 알 수 없게 된 것이다. 

따라서 제목에 **선택법**이라고 하지만 저자는 프로그래밍 언어를 활용해 플롯 그리기를 추천하고 있으니 이전까지 하던대로 R과 Python을 이용해 플롯을 그리면 되겠다. 


## ch 29 스토리텔링과 요점 전달
마지막 장은 이 책의 내용을 요약했다. 가장 기억에 남는 파트는 **장군님을 위한 도표 만들기**였는데 제목도 제목이지만 저 텍스트 그대로 군복무할 때 들어본 적이 있어 더욱 인상 깊었다.

핵심을 쉽게 정리하면 다음과 같다. 

- 전하려는 메세지를 정확하게 표현하자

- 너무 복잡하고 산만하게 플롯을 그리지 말자. 플롯은 요약된 정보이다. 

- 지나치게 단순화하지 말자. 재미없는 플롯은 기억에 남지 않는다. 정보를 부각시킬 수 있도록 포인트를 주자. 

적어놓고 보니 당연한 얘기들이지만 여러 이유들 때문에 (번거로움이 귀찮아서, 더 많이 보여주고 싶어서 등등...) 잘 지켜지지 않는 것들이므로 한 번 더 읽고 넘어가면 피와 살이 되는 말들이니 꼭 기억하자.  

