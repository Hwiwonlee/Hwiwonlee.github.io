---
title: "R에서 하는 Automated EDA"
author: "Hwiwon Lee"
date: "`r format(Sys.Date())`"
categories:
  - EDA
tags:
  - R
  - EDA
  - reviews
output: 
  # https://blog.zarathu.com/posts/2019-01-03-rmarkdown/
    bookdown::html_document2:
      number_sections: FALSE
      fig_caption: TRUE
      fig_height: 6
      fig_width: 10
      highlight: textmate
      theme: cosmo
      toc: yes
      toc_depth: 4
      toc_float: yes
      css: "post_style.css"
# runtime: shiny
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.height = 8, fig.align = "center", cache=T, dpi = 300, dev = "png",
                      comment = "#>")

# https://tibble.tidyverse.org/reference/formatting.html
options(tibble.print_max = 10)
options(tibble.max_extra_cols = 5)
# options(max.print = 300)

library(knitr) # for include_graphics()
library(tidyverse) # as you known, core package
library(googledrive) # Import dataset from the google drive
library(readr) # To read csv file
library(foreign)
library(caret)
library(VennDiagram)
library(venneuler)
library(showtext)
library(lubridate)
font_add_google('Noto Sans KR', 'notosanskr')
font_add_google('Noto Sans', 'notosans')
font_add_google('Nanum Gothic', 'nanumgothic')

library(summarytools)
library(explore)
```


```{r}
# https://karimlahrichi.com/2020/05/02/auto-eda-exploring-the-options/
# https://arxiv.org/pdf/1904.02101.pdf
# https://boxuancui.github.io/DataExplorer/articles/dataexplorer-intro.html#feature-engineering
```

# EDA와 **Automated EDA**
EDA, 탐색적 자료 분석(Explore Data Analysis)는 데이터 분석 과정에서 반드시 수행되는 단계로 feature를 이용한 기초적인 분석으로 feature에 대한 이해와 **feature engineering**을 위한 insight를 얻을 수 있어, 궁극적으로는 **분석의 방향을 좌우할 수 있기 때문**에 많이 강조되는 부분입니다. 

그러나 아시다시피...**EDA는 굉장히 고된 작업입니다.** EDA의 어려운 부분을 꼽으라면 저는 아래의 세 개를 꼽겠습니다. 

1) 명확한 **끝**이 정해지지 않았다는 점 : feature handling이 끝날 때마다 해당 feature에 대한 EDA를 해주어야 합니다. feature의 개수가 많으면 많을수록, handling을 여러 번 할수록 EDA는 반복됩니다. 

2) 지나치게 많은 분석 방법 : EDA는 여러 방법 중 적절한 방법을 찾아내는 insight는 많은 부분, 경험에 기인합니다. 디렉션 스태프나 데이터 분석가가 이 부분에 대한 경험이나 지식이 부족하다면 EDA의 방법에 파묻힙니다. 

3) 경험과 insight에 대한 높은 의존도 : 1)과 2)는 EDA가 높은 수준의 경험이나 insight를 필요로 하기 때문에 발생합니다. 경험이나 insight가 부족한 경우에는 시간과 노력으로 채울 수 있겠지만 그렇게 된다면 EDA에 대한 피로도가 크게 증가하게 됩니다. 

**경험과 insight**가 EDA의 키워드처럼 보여 마치 경험이 쌓이면 단 한번의 EDA로 분석의 방향을 잡을 수 있을 것 같지만 그렇진 않다고 합니다. EDA를 어떻게 해야할 것인가에 대한 경험일 수도 있지만 **어떻게 더 많은 수의 EDA를 빠르게 처리할 것인가**에 대한 경험이 보통이거든요. 

그렇습니다. **경험과 insight 대신 많은 반복 수를 갖는 EDA를 빠르게 처리할 수 있는 방법**, **Automated EDA**에 대해 얘기해보려 합니다. 


# R로 하는 Automated EDA

Automate EDA에 대해 알아보기 이전에, 분명히 해둬야할 것은 Automate EDA는 마법처럼 뚝딱! 하는 순간에 모든 EDA를 끝내주는 방법은 아니라는 것입니다. 물론 높은 수준의 효율성을 갖긴 하지만 모든 상황에서 완벽한 성능을 보이진 않는다는 것을 명심하시길 바라겠습니다. 

제가 이 포스트에서 소개하려는 **Automated EDA**는 **library의 함수를 이용한 EDA 자동화**입니다. 사용자 정의 함수로도 충분히 EDA 자동화를 할 수 있겠지만 꽤 높은 수준의 숙련도가 필요하고 여러 경우에 사용할 수 있는 함수를 만들기엔 또 어려운 일이므로 **Automated EDA**를 추천합니다. 

**Python**의 대표적인 Automated EDA library로 [Pandas profiling](https://pandas-profiling.github.io/pandas-profiling/docs/master/rtd/)이 있는 것처럼 **R**에도 Automated EDA를 돕는 여러 library가 있습니다. 

R에서 활용 가능한 n개의 Automated EDA library의 특징과 간단한 예제에 대해 알아보겠습니다. 

#### 사족
사실 이 글은 Python의 Pandas profiling을 보고 **R에는 비슷한 거 없나?**라는 생각이 들어 알아보며 시작한 글입니다. 개인적인 의견으로 Pandas profiling은 현 시점에서 EDA의 최종 보스라고 생각합니다. 저는 Python의 결과물들이 갖는 특유의 깔끔함을 좋아하는데 Pandas profiling이 특히 더 정돈된 형태로 결과가 출력됩니다. 물론, 기능적인 면에서도 빠지는 게 없습니다. [Pandas profiling의 결과](https://pandas-profiling.github.io/pandas-profiling/examples/master/census/census_report.html)는 단 한 줄의 코드로 실행가능합니다. 

앞으로 소개할 R의 library는 냉정히 말해 pandas profiling 만큼의 성능은 아니라고 생각합니다. 그렇지만 충분히 사용할 수 있는 library이며 Automated EDA가 무엇인지에 대해 배올 수 있는 발판이 될 것이라 생각합니다. 


# **[summarytools](https://cran.r-project.org/web/packages/summarytools/vignettes/Introduction.html)**

**summarytools**는 많은 기능의 EDA를 지원하진 않지만 **비교적 쉽고 간단하게 사용**할 수 있으며 **결과물을 깔끔하게 markdown에 적용**할 수 있다는 장점이 있습니다. 간단히 **summarytools**의 장점을 적어보면 다음과 같습니다. 

- html이나 markdown 등, 다양한 형태의 결과물을 지원합니다. 

- `%>%`, `%$%`, `%>>%` 등의 pipeline을 사용할 수 있습니다. 

- html 형태로 결과물을 생성하는 경우, [bootstrap](https://getbootstrap.com/)이나 사용자 설정 CSS를 적용할 수 있습니다. 


[**summarytools**의 대표적인 함수와 기능](https://cran.r-project.org/web/packages/summarytools/vignettes/Introduction.html)은 아래와 같습니다. 

+--------------+-----------------------------------------------------------------------------------------------------------+
| 함수         | 설명                                                                                                      |
+==============+===========================================================================================================+
|freq()        | 빈도표(frequency table)을 위한 함수. feature 안의 value 혹은 NA의 출현횟수, 비율 등을 나타낸다.           |
+--------------+-----------------------------------------------------------------------------------------------------------+
|ctable()      | 분할표(contingency table)를 위한 함수. feature 안의 이산형 혹은 명목형 value에 대한 분할표 생성한다.      |
+--------------+-----------------------------------------------------------------------------------------------------------+
|descr()       | 숫자형 feature에 대한 기술 통계량과 경향 및 산포 정도를 나타낸다.                                         |
+--------------+-----------------------------------------------------------------------------------------------------------+
|dfSummary()   | 모든 feature에 대해 각 feature의 형태에 따른 요약 통계량과 빈도 수, 히스토그램, 막대 차트 등을 생성한다.  |
|              | dataset에 포함된 모든 feature에 대한 내용을 간단히 훑기 좋은 함수이다.                                    |
+--------------+-----------------------------------------------------------------------------------------------------------+

**summarytools**의 핵심이라고 생각하는 `dfSummary()`의 예제를 하나 보겠습니다. 

```{r}
# load the library
library(summarytools)
```

Rmarkdown에 결과물을 표시하기 위해 다음과 같은 코드로 실행하겠습니다. default형태인 `dfSummary(mpg)`로 실행하면 html로 결과물이 출력되어 markdown에 사용할 수 없습니다. 


```{r, eval = FALSE}
# date 형식도 dfSummary()에 적용 가능함을 보여주기 위해 date column 추가
mpg %>% 
  mutate(date = lubridate::ymd(20200101) + days(row_number()-1)) -> mpg

# Markdown form으로 결과 생성
dfSummary(mpg, plain.ascii = FALSE, style = "grid", 
          graph.magnif = 0.75, valid.col = FALSE, tmp.img.dir = "/tmp")
```

**Data Frame Summary**
**mpg**
**Dimensions:** 234 x 12  
**Duplicates:** 0  

+----+---------------+--------------------------+---------------------+----------------------+---------+
| No | Variable      | Stats / Values           | Freqs (% of Valid)  | Graph                | Missing |
+====+===============+==========================+=====================+======================+=========+
| 1  | manufacturer\ | 1\. dodge\               | 37 (15.8%)\         | ![](/tmp/ds0034.png) | 0\      |
|    | [character]   | 2\. toyota\              | 34 (14.5%)\         |                      | (0%)    |
|    |               | 3\. volkswagen\          | 27 (11.5%)\         |                      |         |
|    |               | 4\. ford\                | 25 (10.7%)\         |                      |         |
|    |               | 5\. chevrolet\           | 19 ( 8.1%)\         |                      |         |
|    |               | 6\. audi\                | 18 ( 7.7%)\         |                      |         |
|    |               | 7\. hyundai\             | 14 ( 6.0%)\         |                      |         |
|    |               | 8\. subaru\              | 14 ( 6.0%)\         |                      |         |
|    |               | 9\. nissan\              | 13 ( 5.6%)\         |                      |         |
|    |               | 10\. honda\              | 9 ( 3.8%)\          |                      |         |
|    |               | [ 5 others ]             | 24 (10.3%)          |                      |         |
+----+---------------+--------------------------+---------------------+----------------------+---------+
| 2  | model\        | 1\. caravan 2wd\         | 11 ( 4.7%)\         | ![](/tmp/ds0035.png) | 0\      |
|    | [character]   | 2\. ram 1500 pickup 4wd\ | 10 ( 4.3%)\         |                      | (0%)    |
|    |               | 3\. civic\               | 9 ( 3.8%)\          |                      |         |
|    |               | 4\. dakota pickup 4wd\   | 9 ( 3.8%)\          |                      |         |
|    |               | 5\. jetta\               | 9 ( 3.8%)\          |                      |         |
|    |               | 6\. mustang\             | 9 ( 3.8%)\          |                      |         |
|    |               | 7\. a4 quattro\          | 8 ( 3.4%)\          |                      |         |
|    |               | 8\. grand cherokee 4wd\  | 8 ( 3.4%)\          |                      |         |
|    |               | 9\. impreza awd\         | 8 ( 3.4%)\          |                      |         |
|    |               | 10\. a4\                 | 7 ( 3.0%)\          |                      |         |
|    |               | [ 28 others ]            | 146 (62.4%)         |                      |         |
+----+---------------+--------------------------+---------------------+----------------------+---------+
| 3  | displ\        | Mean (sd) : 3.5 (1.3)\   | 35 distinct values  | ![](/tmp/ds0036.png) | 0\      |
|    | [numeric]     | min < med < max:\        |                     |                      | (0%)    |
|    |               | 1.6 < 3.3 < 7\           |                     |                      |         |
|    |               | IQR (CV) : 2.2 (0.4)     |                     |                      |         |
+----+---------------+--------------------------+---------------------+----------------------+---------+
| 4  | year\         | Min  : 1999\             | 1999 : 117 (50.0%)\ | ![](/tmp/ds0037.png) | 0\      |
|    | [integer]     | Mean : 2003.5\           | 2008 : 117 (50.0%)  |                      | (0%)    |
|    |               | Max  : 2008              |                     |                      |         |
+----+---------------+--------------------------+---------------------+----------------------+---------+
| 5  | cyl\          | Mean (sd) : 5.9 (1.6)\   | 4 : 81 (34.6%)\     | ![](/tmp/ds0038.png) | 0\      |
|    | [integer]     | min < med < max:\        | 5 :  4 ( 1.7%)\     |                      | (0%)    |
|    |               | 4 < 6 < 8\               | 6 : 79 (33.8%)\     |                      |         |
|    |               | IQR (CV) : 4 (0.3)       | 8 : 70 (29.9%)      |                      |         |
+----+---------------+--------------------------+---------------------+----------------------+---------+
| 6  | trans\        | 1\. auto(av)\            | 5 ( 2.1%)\          | ![](/tmp/ds0039.png) | 0\      |
|    | [character]   | 2\. auto(l3)\            | 2 ( 0.8%)\          |                      | (0%)    |
|    |               | 3\. auto(l4)\            | 83 (35.5%)\         |                      |         |
|    |               | 4\. auto(l5)\            | 39 (16.7%)\         |                      |         |
|    |               | 5\. auto(l6)\            | 6 ( 2.6%)\          |                      |         |
|    |               | 6\. auto(s4)\            | 3 ( 1.3%)\          |                      |         |
|    |               | 7\. auto(s5)\            | 3 ( 1.3%)\          |                      |         |
|    |               | 8\. auto(s6)\            | 16 ( 6.8%)\         |                      |         |
|    |               | 9\. manual(m5)\          | 58 (24.8%)\         |                      |         |
|    |               | 10\. manual(m6)          | 19 ( 8.1%)          |                      |         |
+----+---------------+--------------------------+---------------------+----------------------+---------+
| 7  | drv\          | 1\. 4\                   | 103 (44.0%)\        | ![](/tmp/ds0040.png) | 0\      |
|    | [character]   | 2\. f\                   | 106 (45.3%)\        |                      | (0%)    |
|    |               | 3\. r                    | 25 (10.7%)          |                      |         |
+----+---------------+--------------------------+---------------------+----------------------+---------+
| 8  | cty\          | Mean (sd) : 16.9 (4.3)\  | 21 distinct values  | ![](/tmp/ds0041.png) | 0\      |
|    | [integer]     | min < med < max:\        |                     |                      | (0%)    |
|    |               | 9 < 17 < 35\             |                     |                      |         |
|    |               | IQR (CV) : 5 (0.3)       |                     |                      |         |
+----+---------------+--------------------------+---------------------+----------------------+---------+
| 9  | hwy\          | Mean (sd) : 23.4 (6)\    | 27 distinct values  | ![](/tmp/ds0042.png) | 0\      |
|    | [integer]     | min < med < max:\        |                     |                      | (0%)    |
|    |               | 12 < 24 < 44\            |                     |                      |         |
|    |               | IQR (CV) : 9 (0.3)       |                     |                      |         |
+----+---------------+--------------------------+---------------------+----------------------+---------+
| 10 | fl\           | 1\. c\                   | 1 ( 0.4%)\          | ![](/tmp/ds0043.png) | 0\      |
|    | [character]   | 2\. d\                   | 5 ( 2.1%)\          |                      | (0%)    |
|    |               | 3\. e\                   | 8 ( 3.4%)\          |                      |         |
|    |               | 4\. p\                   | 52 (22.2%)\         |                      |         |
|    |               | 5\. r                    | 168 (71.8%)         |                      |         |
+----+---------------+--------------------------+---------------------+----------------------+---------+
| 11 | class\        | 1\. 2seater\             | 5 ( 2.1%)\          | ![](/tmp/ds0044.png) | 0\      |
|    | [character]   | 2\. compact\             | 47 (20.1%)\         |                      | (0%)    |
|    |               | 3\. midsize\             | 41 (17.5%)\         |                      |         |
|    |               | 4\. minivan\             | 11 ( 4.7%)\         |                      |         |
|    |               | 5\. pickup\              | 33 (14.1%)\         |                      |         |
|    |               | 6\. subcompact\          | 35 (15.0%)\         |                      |         |
|    |               | 7\. suv                  | 62 (26.5%)          |                      |         |
+----+---------------+--------------------------+---------------------+----------------------+---------+
| 12 | date\         | min : 2020-01-01\        | 234 distinct values | ![](/tmp/ds0045.png) | 0\      |
|    | [Date]        | med : 2020-04-26\        |                     |                      | (0%)    |
|    |               | max : 2020-08-21\        |                     |                      |         |
|    |               | range : 7m 20d           |                     |                      |         |
+----+---------------+--------------------------+---------------------+----------------------+---------+

`mpg`가 가진 11개의 feature에 대한 간단한 정보들을 table형태로 보여줍니다. feature의 타입에 따라, factor(혹은 character) feature는 value의 level과 count, bar chart의, integer feature는 요약 통계량과 histogram의 형태로 표현됩니다. `dfSummary()`에 `date`형태의 feature도 적용 가능함을 보여주기 위해 `date` column을 추가했고 date feature의 출력도 확인할 수 있습니다. 

feature에 대한 대략적인 정보를 알려준다는 측면에서 `dfSummary()`는 `base::summary()`나 `tibble::glimpse()`의 확장 형태라고 볼 수 있습니다. feature 사이의 관계는 알 수 없다는 점에서 아쉬울 수 있으나 결과물이 꽤 괜찮게 나오므로 저는 만족하고 사용하고 있습니다. 

# [**explore**](https://cran.r-project.org/web/packages/explore/vignettes/explore.html)

두번째로 소개해드릴 패키지는 **explore**입니다.  [**explore**](https://cran.r-project.org/web/packages/explore/vignettes/explore.html) 페이지에 따른 장점을 요약해보면 아래와 같습니다. 

- shiny app이나 함수를 이용한 interactive 데이터 탐색을 지원합니다. 

- 단 한 줄로 feature에 대한 EDA를 할 수 있으며 문서화를 지원합니다. 

- 다음 4개의 함수를 이용한 손쉬운 분석과 문서화를 할 수 있습니다. 
    - `explore()` : 그림이나 표로 feature를 분포나 형태를 표현하는 함수
    
    - `describe()` : feature를 요약통계량으로 표현하는 함수
    
    - `explain_tree()` : 타겟으로 설정된 feature를 대상으로 간단한 decision tree를 만드는 함수
    
    - `report()` : 결과물을 손쉽게 문서화해주는 함수 

    





**explore**는 모든 feature를 대상으로 한 description보다는 설정된 feature 사이의 관계를 알아보는데 좀 더 적합한 패키지라고 생각합니다.
```{r load_explore}
library(explore)
```

```{r explore_exercise}
# explore(mpg)
# ?explore
# mpg %>% report(output_file = "report.html", output_dir = tempdir())


iris %>% explore_all(target = Species)
```
