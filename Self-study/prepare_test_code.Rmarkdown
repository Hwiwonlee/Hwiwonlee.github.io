---
title: "Test"
author: "Hwi Won Lee"
date: "`r format(Sys.Date())`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(titanic)
library(lubridate)
```

## summary table using `tidyverse`

```{r data_handling}
data <- nycflights13::flights

# index, date column 생성
data %>% 
  mutate(date = paste0(year, "-", month, "-", day, " ", hour, ":", minute)) %>% 
  mutate(date = parse_date_time(date, orders = "YmdHM", tz = "EST")) %>% 
  mutate(index = row_number()) %>% 
  select(index, date, year, month, day, hour, minute, everything()) -> data

glimpse(data)


set.seed(1000)
duplicate_index_a <- sample(seq(1, nrow(data), 1), nrow(data)*0.3)
duplicate_index_b <- sample(seq(1, nrow(data), 1), nrow(data)*0.2)

data %>% 
  filter(index %in% duplicate_index_a) -> duplicate_data_a # nrow : 101032
data %>% 
  filter(index %in% duplicate_index_b) -> duplicate_data_b # nrow : 67355

duplicate_data_a %>% 
  rbind(duplicate_data_b) %>% 
  arrange(index) %>% 
  
  # 중복되는 행 지우기
  distinct(index, .keep_all = TRUE) -> duplicate_data # nrow : 148077
```


```{r summary_table}
duplicate_data %>% 
  # drop_na() %>%  # nrow : 143918
  dplyr::summarise(across(c("dep_delay", "arr_delay", "air_time"), 
                   list(Mean = mean, SD = sd, Median = median, Min = min, Max = max, 
                        Q1 = ~quantile(., 0.25, na.rm = TRUE), 
                        Q3 = ~quantile(., 0.75, na.rm = TRUE)), na.rm = TRUE)) %>% 
  tidyr::pivot_longer(
    everything(), 
    names_to = c("Variable", ".value"),
    names_pattern = "(.*)_([[:upper:]].*)"
  )
```


```{r}
duplicate_data %>% 
  mutate(delay_or_not = as.factor(ifelse(arr_delay > 0, "delay", "no"))) %>% 
  mutate(across(is.character, as.factor)) %>% 
  drop_na() -> duplicate_data
  
target_x <- c("dep_time", "sched_dep_time", "dep_delay", "arr_time", 
              "sched_arr_time", "carrier", "flight", "origin", "dest", "air_time", "distance")
  

# setdiff(colnames(duplicate_data), list('class'))
formula <- as.formula(paste("delay_or_not", paste(target_x, collapse=' + '), sep=' ~ '))


train_index <- caret::createDataPartition(duplicate_data$delay_or_not, p = 0.7)

train <- duplicate_data[train_index$Resample1, ]
test <- duplicate_data[-train_index$Resample1, ]


# 5repeated, 10 folds
cv_folds <- createMultiFolds(train$delay_or_not, k = 10, times = 5)

# 3 folds
cv_fold <- createFolds(train$delay_or_not, k = 3)
```

```{r}
# repeated CV(5 repeated, 10 folds)
cv_ctrl <- trainControl(method = "repeatedcv", number = 10,
                        repeats = 5, 
                        index = cv_folds, 
                        summaryFunction = twoClassSummary,
                        classProbs = TRUE,
                        verboseIter = FALSE)
# CV(3folds)
cv_ctrl <- trainControl(method = "cv", number = 3,
                        index = cv_folds, 
                        summaryFunction = twoClassSummary,
                        classProbs = TRUE,
                        verboseIter = FALSE)

tune_grid <- expand.grid(
  alpha = 0:1,
  lambda = seq(0.0001, 1, length=10)
)


gc_model <- caret::train(delay_or_not ~ sched_dep_time + dep_delay + arr_time + carrier + flight + air_time + distance, 
                         train,
                         method = "glmnet",
                         metric = "Sens",
                         tuneGrid = tune_grid,
                         trControl = cv_ctrl)

### 예측모형 살펴보기
gc_model

gc_pred_class <- predict(gc_model, newdata=test, type = "raw")

confusionMatrix(gc_pred_class, test$delay_or_not)
```

```{r knn}
# https://leedakyeong.tistory.com/entry/R-caret-%ED%8C%A8%ED%82%A4%EC%A7%80%EB%A1%9C-modeling-model-tuning-iris-classification
iris %>% 
  mutate(Species = as.character(Species)) %>% 
  filter(Species != "setosa") -> iris_data

set.seed(1234)

index <- caret::createDataPartition(iris_data$Species, p = 0.7)
train <- iris_data[index$Resample1, ]
test <- iris_data[-index$Resample1, ]

cv_fold <- caret::createFolds(train$Species, k = 3)

cv_ctrl <- caret::trainControl(method = "cv", number = 3,
                               index = cv_fold)

model <- caret::train(Species ~ ., data = train,
                      method = "knn", 
                      trControl = cv_ctrl, 
                      tuneGrid = expand.grid(k = 7:13))

predict1 <- predict(model, newdata = test)

confusionMatrix(predict1, as.factor(test$Species))
```


```{r}
duplicate_data %>% 
  ggplot(aes(x = air_time)) + 
  geom_density(aes(col = dest, fill = dest), alpha = 0.3) + 
  theme(legend.position = "none")
```


```{r}
iris %>% 
  ggplot(aes(x = Sepal.Length)) + 
  geom_density(aes(col = Species, fill = Species), alpha = 0.3) + 
  scale_y_continuous(limits = c(0, 1.3), expand = c(0, 0)) + 
  scale_x_continuous(limits = c(3.5, 8.5), expand = c(0, 0)) + 
  theme_minimal()
```
