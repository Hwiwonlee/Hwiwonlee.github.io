---
title: "lubridate 패키지를 이용한 날짜 데이터 다루기"
author: "Hwiwon Lee"
date: "`r format(Sys.Date())`"
summary : "날짜형 데이터 핸들링을 지원하는 lubridate 패키지의 기초"
categories:
  - tidyverse
tags:
  - R
  - tidyverse
  - lubridate
output:
  # https://blog.zarathu.com/posts/2019-01-03-rmarkdown/
    bookdown::html_document2:
      fig_retina : 1
      number_sections: FALSE
      fig_caption: TRUE
      fig_height: 6
      fig_width: 10
      highlight: textmate
      theme: cosmo
      toc: yes
      toc_depth: 4
      toc_float: yes
      css: "post_style.css"
# https://stackoverflow.com/questions/535616/can-css-choose-a-different-default-font-and-size-depending-on-language
---



```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.height = 8, fig.align = "center", cache=T, dpi = 300, dev = "png",
                      comment = "#>")

# https://tibble.tidyverse.org/reference/formatting.html
options(tibble.print_max = 10)
options(tibble.max_extra_cols = 5)
# options(max.print = 300)

library(knitr) # for include_graphics()
library(tidyverse) # as you known, core package
library(googledrive) # Import dataset from the google drive
library(readr) # To read csv file
library(lubridate)
```

# **lubridate package**

R을 활용해 데이터 분석을 하다보면 만나는 **날짜형 데이터**에 고생해보신 경험, 한 두 번 정도는 있으실 겁니다. 오늘은 **날짜형 데이터**를 다루는데 특화된 [**lubridate**](https://lubridate.tidyverse.org/index.html)에 대해 알아보겠습니다. 

**lubridate**는 **tidyverse**에 속한 패키지로 날짜형 데이터를 효과적으로 다루기 위한 패키지입니다. R Base에서도 날짜형 데이터를 다루는 함수들을 지원하긴 하지만 사용자 친화적이지 않기 때문에 추천드리지 않습니다. 더불어 날짜형 데이터를 다루는 **zoo**와 **xts**와 같은 다른 패키지들이 존재하지만 상대적으로 사용이 편리하고 구글에 자료가 풍부해 troubleshooting에 용이한 **lubridate**의 사용을 권해드립니다. 

날짜형 데이터는 왜 다루기 어려운 걸까요? [**R for science : 16 Dates and times**](https://r4ds.had.co.nz/dates-and-times.html)의 introduction을 참고해 제 나름대로 정리해보겠습니다.

> 날짜형 데이터를 다루기 어려운 이유는 우리에게 너무나 익숙한 시간이 실제로는 다소 불규칙적으로 나열되어있기 때문이다. 10년 정도의 시간으로 가상의 데이터를 만든다고 해보자. 어떤 연도는 365일이 아닐 것이다. 서머 타임을 적용하면 어떤 날들은 24시간이 아닐 것이다. 여기에 시차까지 적용해 여러 나라의 10년 정도의 시간을 만든다고 해보자. 이건 절대 쉬운 일이 아니다. 

**lubridate**로 날짜형 데이터를 다루기 전에, 먼저 날짜형 데이터란 무엇인지에 대해 짚고 넘어갈 필요성이 있습니다. 날짜형 데이터는 어떻게 구성되어있을까요? 


## **날짜형 데이터 : 날짜(date), 시간(time) 그리고 날짜-시간(date-time)**
**날짜형 데이터**는 다음의 3개의 value로 세분화할 수 있습니다. 

- 연월일(Year, Month, Day)로 구성되는 **날짜(date)**

- 시분초(Hour, Minute, Second)로 구성되는 **시간(time)**

- 날짜와 시간이 합쳐진 **날짜-시간(date-time)**

보통의 경우, 날짜형 데이터(date type)보다는 날짜-시간(date-time) 혹은 날짜/시간(date/time) 등으로 표기합니다. 엄밀히 말하면 세 개의 개념이 각각 다르기 때문에 경우에 따라 다른 단어를 사용하는 것이 옳습니다만 이 포스트에서는 위 3개의 데이터를 통칭하기 위해 날짜형 데이터라는 말을 사용하겠습니다.

```{r}
# load lubridate
library(lubridate)
```

```{r}
# date, time, date-time의 생성
date <- lubridate::as_date("2020-01-01")
time <- hms::as_hms(3600) # using hms package
`date-time` <- lubridate::as_datetime("2020-01-01 01:00:00", tz = "UTC")
 date; time; `date-time`
```

`date-time`에 보이는 `UTC`는 [협정 세계시](https://ko.wikipedia.org/wiki/%ED%98%91%EC%A0%95_%EC%84%B8%EA%B3%84%EC%8B%9C)를 뜻합니다. `date`와 `time`가 연월일, 시분초로만 구성되어있는 것에 비해 `date-time`은 좀 더 구체적인 시간 정보를 갖고 있다고 생각하셔도 좋습니다. 

`time`을 제외한 `date`와 `date-time`은 R base의 함수로도 생성할 수 있습니다. 

```{r}
date_base <- as.Date("2020-01-01")
`date-time_base` <- as.POSIXct("2020-01-01 01:00:00", tz = "UTC")
```
```{r, collapse=TRUE}
# date와 date_base가 같음을 확인 
identical(date, date_base)
```
```{r, collapse=TRUE}
# date와 date_base가 같음을 확인
identical(`date-time`, `date-time_base`)
```

딱 이 정도가 R base와 **lubridate**의 공통점입니다. 이제 **lubridate**를 활용한 예제로 **lubridate**가 가지고 있는 장점을 알아보겠습니다. 


### **몰라도 좋고 알면 더 좋은 날짜형 데이터의 class**

`class`에 대한 정보는 데이터 분석을 위해서보단 R 프로그래밍 그 자체를 이해하는데 도움이 될 수 있습니다. 앞서 보았던 날짜형 데이터, `date`, `time`, `date-time`은 각각 다른 `class`를 가집니다. 하나씩 짚어보면서 설명드리겠습니다. 
```{r, collapse=TRUE}
class(date)
```
- `"Date" class`는 **연산 가능한 날짜 데이터**로 가장 기초적인 형태의 날짜 데이터입니다.  `1970-01-01`을 기준연월일로 하여 일단위에 대한 정수값을 가지고 이를 이용해 날짜 연산을 지원합니다. 
    ```{r, collapse=TRUE}
    date + 1
    ```
    ```{r, collapse=TRUE}
    unclass(date) # 2020년 1월 1일은 1970년 1월 1일 이후 18262일이 지났다. 
    ```

```{r, collapse=TRUE}
class(time)
```
- `"difftime class`는 **시간의 차이**만을 저장하는 `class`로 이미 R base에서 구현되어 있지만 시간 그 자체를 저장하고 표현하기엔 어렵다는 단점이 있습니다. 이 문제를 해결하기 위해 고안된 것이 [hms 패키지](https://hms.tidyverse.org/index.html)입니다. 

- hms 패키지에서 추가된 `"hms" class`는 `"difftime" class`를 기반으로 **시간**을 저장하기 위해 설계된 `class`입니다. **시간** 데이터을 간편하게 사용할 수 있는 패키지이므로 알아두시길 바랍니다. 

```{r, collapse=TRUE}
class(`date-time`)
```
- `"POSIXct" class`는 **연산 가능한 날짜-시간(date-time) 데이터**로 날짜와 시간, 그리고 타임존에 대한 정보를 가지고 있는 `class`입니다. `"POSIXct"`와 비슷한 `"POSIXlt"`도 존재합니다. `"POSIXct"`는 데이터 프레임에 넣기 용이한 형태이며 `"POSIXlt"`는 사람이 읽고 이해하기 편한 형태라는 구성의 차이만을 갖습니다.  

- `"POSIXt" class`는 `"POSIXct"`, `"POSIXlt"` 두 `class`를 상속받는 vitual class로 두 `class` 사이의 연산을 지원하기 위해 존재합니다. 자세한 설명은 [Date-Time Classes](https://stat.ethz.ch/R-manual/R-devel/library/base/html/DateTimeClasses.html)을 참고하시길 바랍니다. 

# **lubridate을 이용한 날짜-시간 데이터 핸들링**
[**lubridate CHEAT SHEET**](https://rawgit.com/rstudio/cheatsheets/master/lubridate.pdf)와 [**lubridate : Function reference**](https://lubridate.tidyverse.org/reference/index.html), 그리고 [**R for science : 16 Dates and times**](https://r4ds.had.co.nz/dates-and-times.html)을 참고해 **lubridate**의 부분을 다음과 같이 크게 세 부분으로 나눠보았습니다. 

- 날짜형 데이터 변환 및 생성

- 날짜형 데이터를 이루는 요소 다루기(component handling)

- 날짜형 데이터 연산 : 기간(period), 지속(duration), 간격(interval)

순서대로 찬찬히 살펴보겠습니다. 


## **날짜형 데이터 변환 및 생성**

R에서 날짜형 데이터를 생성하는 경우를 생각해볼 때, 가장 먼저 떠오르는 것은 문자열 또는 숫자 형태로 저장된 날짜 데이터를 날짜형 데이터로 바꿔 생성하는 일입니다. 실제로 DB에 저장된 데이터를 SQL 등으로 가져오는 것이 아닌, 흔히 접하는 엑셀 형태의 원자료(raw data)들은 엄밀한 의미의 **날짜형 데이터**가 없습니다. 문자열이나 숫자를 날짜형 데이터의 모습으로 저장하고 있을 뿐입니다. 

따라서 원자료에 속한 날짜 데이터들을 날짜형 데이터로 바꿔주어야 원활한 분석이 가능합니다. **lubridate**는 대상이 되는 날짜 데이터의 정보에 따라 사용할 수 있는 여러 함수들을 지원합니다. 예제를 이용해 [**Date/time parsing**](https://lubridate.tidyverse.org/reference/index.html)의 함수 사용법을 알아보겠습니다.

### **날짜형 데이터를 이루는 요소들을 이용한 데이터 형 변환**

날짜 데이터가 가진 날짜와 시간 정보에 따라 `ymd()`와 `ymd_hms()`로 대표되는 두 함수꼴을 사용할 수 있습니다. 함수 이름부터 굉장히 직관적인데, `ymd()`는 **y**ear, **m**month, **d**ay를 의미하고 `ymd_hms()`는 앞의 ymd에 **h**our, **m**inute, **s**econd를 추가한 것입니다. 여기에 앞서 보신 `hms()`도 같은 맥락으로 사용 가능합니다. 

`ymd()`, `ymd_hms()`, `hms()`는 날짜와 시간 정보가 어떤 꼴이냐에 따라 다시 한 번 세분화되기 때문에 전처리 과정에서 마주치는 대부분의 날짜 데이터를 날짜형 데이터로 손쉽게 바꿀 수 있습니다. `ymd()`의 경우를 예로 들어보겠습니다. 

```{r, collapse=TRUE}
# ymd(), ydm(), mdy(), myd(), dmy(), dym()
ymd("2020-01-10")
ymd("2020, Jan10th")
ydm("201001")
mdy("m 1 d 10 y 20")
mdy("jan 10, 2020")
myd("1/20/10")
dmy("10 !! 01 ?? 20")
dym("10 테 20 스 1 트")
```
`"2020-01-10"`을 의미(?)하는 여러 문자열입니다. `ymd()`가 가진 유연성을 보여드리기 위해 다소 억지스러운 문자열을 사용해보았지만 모두 `"2020-01-10"`로 반환되는 것을 볼 수 있습니다. 물론 아래와 같이 어거지로 헷갈리는 데이터를 만들면 `NA`가 반환되기도 합니다만 위의 예시에서 볼 수 있듯 실제 분석에서 받을 수 있는 대부분의 날짜 데이터를 정상적으로 변환시키기 충분합니다. 

```{r, collapse=TRUE}
# 악의적인 날짜 데이터
ymd("y2020m01d10")
```

`ymd()` 뿐 아니라 `ymd_hms()`와 `hms()`도 높은 수준의 유연성을 갖습니다. 좀 더 극단적인 예로, 열(column)에 포함된 날짜 데이터의 형태가 다른 경우에도 대처가 되는지 확인해보겠습니다. 

```{r, collapse=TRUE}
dt <- c("2020-01-10", "2020!01!10", "2020?01!10", "01102020", "2020, Jan 10th", "jan 10, 20")
ymd(dt)
mdy(dt)
```
사용된 함수의 형태(`ymd()` 혹은 `mdy()`)에 따라 맞춰 날짜형 데이터로 변환되는 것을 볼 수 있습니다. 만약 하나의 열에 여러 형태의 날짜 데이터가 존재한다면 먼저 형태를 맞춰주고 알맞는 함수를 사용하는 것이 효율적일 것입니다. 

`ymd()`부터 `hms()`까지 날짜 데이터의 형태에 따라 사용할 수 있는 함수의 형태가 다양한 것은 양날의 검입니다. 대부분의 경우를 대처해낼 수 있지만 그 종류가 너무 많은 것 때문입니다. 한 번에 하나의 형태만 커버해내는 것도 조금 아쉬울 수 있습니다. 이러한 문제점을 완화시킨 사용자 친화적 함수, [`date-time parsing functions`](https://lubridate.tidyverse.org/reference/parse_date_time.html)에 대해 알아보겠습니다. 


### **다양한 형태의 날짜 데이터를 대처하는 방법 : [`date-time parsing functions`](https://lubridate.tidyverse.org/reference/parse_date_time.html)**

가끔, 데이터 분석을 해보면 **창의적인 방식**으로 value를 저장한 데이터셋을 마주하게 됩니다. 이런 경우는 데이터를 관리하는 담당자나 시스템이 바뀌었거나, 데이터를 데이터 분석가에게 주는 과정에서 실수가 발생했거나 해당 기관이나 조직에서 사용하는 형태 등, 여러가지 이유로 발생합니다. **창의적인 방식**으로 날짜 데이터셋이 저장되었다는 가정을 해보겠습니다. 

위의 방법을 이용하면 다수의 형태를 기준으로 날짜형 데이터로 바꿀 수 있지만 나머지 값들은 `NA`로 바뀐다는 단점이 있습니다. 이 상황에 대처하기 위해 `parse_date_time()`이 존재합니다. 

```{r, collapse=TRUE}
dt <- c("2020-01-10", "2020!01!10", "2020?01!10", "01102020", "2020, Jan 10th", "jan 10, 20")
parse_date_time(dt, c("ymd", "mdy", "ybd", "bdy"))
class(parse_date_time(dt, c("ymd", "mdy", "ybd", "bdy")))
```
`ymd()`와 `mdy()`로는 `NA`가 나왔지만 `parse_date_time()`을 이용한 경우, 대상으로 하는 날짜 데이터의 여러 형태를 넣어주면 문제 없이 변환되는 것을 볼 수 있습니다. `parse_date_time()`이기 때문에 이름처럼 반환되는 날짜형 데이터의 `class`는 날짜-시간 데이터 꼴임을 볼 수 있습니다. 


구글링을 통해 [재미있는 이슈](https://github.com/tidyverse/lubridate/issues/727)를 찾아서 공유합니다. **연도**가 제대로 나오지 않는 문제였는데, `orders`, `exact`의 arg를 조정해서 해결할 수도 있지만 중요한 것은 `y`가 아니라 `Y`로 정의해야한다는 것입니다. 저도 자주 `y`로 사용하고 이런 문제는 겪어보지 못했었는데 흥미롭습니다. 
```{r}
parse_date_time(c("2101, Jan 10", "10/01/2101"), orders = c("ymd", "dmy"))
parse_date_time(c("2101, Jan 10", "10/01/2101"), orders = c("Ybd", "dmY"), exact = FALSE, locale = "English")
parse_date_time(c("2101, Jan 10", "10/01/2101"), orders = c("%Y, %b %d", "%d/%m/%Y"), exact = TRUE, locale = "English")
```

`parse_data_time()`에 대한 더 많은 정보는 [`parse_data_time()`](https://lubridate.tidyverse.org/reference/parse_date_time.html)를 참고하시면 됩니다.

### **쪼개진 날짜 데이터를 합치는 방법 : `make_datetime()`과 `make_date()`** 

라이브러리 `nycflight13`의 `flights`는 2013년, 뉴욕에 있는 공항에서 출발하는 모든 비행기의 정보를 담고 있는 데이터셋입니다. 이 데이터셋을 이용해서 날짜 데이터의 각각의 요소를 열로 쪼개 저장한 경우 하나의 날짜형 데이터열로 저장하는 방법을 소개해드리겠습니다. [R for data science](https://r4ds.had.co.nz/dates-and-times.html#from-individual-components)에서도 볼 수 있습니다. 

```{r}
library(nycflights13)

flights %>% 
  select(year, month, day, hour, minute) %>% 
  mutate(departure = make_datetime(year, month, day, hour, minute)) %>% 
  select(departure, everything(), -year) -> df_flights

df_flights
```



## **날짜형 데이터를 이루는 요소 다루기(component handling)**

**lubridate**에는 날짜형 데이터의 기본 요소(component)인 연월일-시분초를 각각 다루는 기본 함수부터 목적에 맞게 요소들을 편집할 수 있는 함수들까지 지원하고 있습니다. 

그럼 기본 함수와 응용 함수로 구분해서 알아보도록 하겠습니다. 

### **연월일-시분초를 다루는 기본 함수**
연월일-시분초를 다루는 기본 함수를 각각의 요소를 불러오는 것으로 정의해보았습니다. 

```{r}

# 연월일
df_flights %>% 
  mutate(departure = date(departure)) %>% 
  head(3)

# 연
df_flights %>% 
  mutate(departure = year(departure)) %>% 
  head(3)

# 월
df_flights %>% 
  mutate(departure = month(departure)) %>% 
  head(3)

# 날짜
df_flights %>% 
  mutate(departure = day(departure)) %>% 
  head(3)

# 요일을 return 
df_flights %>% 
  mutate(departure = wday(departure, label = TRUE)) %>% 
  head(3)

# 시간
df_flights %>% 
  mutate(departure = hour(departure)) %>% 
  head(3)

# 분
df_flights %>% 
  mutate(departure = minute(departure)) %>% 
  head(3)

# 초 
df_flights %>% 
  mutate(departure = second(departure)) %>% 
  head(3)
```

굉장히 직관적인 이름과 결과를 보실 수 있습니다. [R for data science](https://r4ds.had.co.nz/dates-and-times.html#getting-components)의 코드를 보면 이를 이용해 간단한 플롯을 그려볼 수도 있습니다. 


```{r flight-wday-barplot, fig.cap="flights 데이터로 그린 요일 별 비행기 출발 횟수"}
# https://r4ds.had.co.nz/dates-and-times.html#getting-components
df_flights %>% 
  mutate(wday = wday(departure, label = TRUE)) %>% 
  ggplot(aes(x = wday)) +
  geom_bar(fill = "#0080FF") + 
  theme_minimal() %>% 
  labs(x = "요일", y = "빈도 수") +
  theme(
    axis.title = element_text(size = 16)
  ) +
  theme_minimal()
  
```

### **연월일-시분초를 이용한 응용 함수**
연월일-시분초를 그대로 가져오는 것 외에 **몇 주차**인지 **몇 분기**인지 알아볼 수 있는, 조금 특별하지만 알아두면 쓸모있는 함수들을 지원합니다. 

```{r}
# n주차를 반환하는 week
df_flights %>% 
  mutate(weeks = week(departure)) %>% 
  filter(weeks == 2) %>% head(3)

# 분기를 반환하는 quarter
df_flights %>% 
  mutate(quarters = quarter(departure)) %>% 
  filter(quarters == 3) %>% head(3)

# 반기를 반환하는 semester
df_flights %>% 
  mutate(semesters = semester(departure)) %>% 
  filter(semesters == 2) %>% head(3) # error

# 시간을 am과 pm으로 구분할 수 있게 해주는 am, pm
df_flights %>% 
  mutate(am = am(departure)) %>% 
  mutate(pm = pm(departure)) %>% 
  filter(am == TRUE) %>% 
  count() # am 시간대에 출발한 비행기는 모두 131,021대
```
위의 코드를 찬찬히 보시면 아시겠지만, `semester()`에서 10월이 먼저 등장한 것을 볼 수 있습니다. 이 문제는 데이터셋이 정렬되지 않은 상태에서 `semester()`가 실행되었고 `filter()`의 조건에 맞는 첫 번째 관측값이 10월이기 때문입니다. 그러므로 아래와 같이 `arrange()`를 먼저 사용하시길 추천드립니다. 

```{r}
df_flights %>% 
  arrange(departure) %>% 
  # with_year 파라메터를 이용하면 연도까지 표현할 수 있습니다. 
  mutate(semesters = semester(departure, with_year = TRUE)) %>% 
  filter(semesters == 2013.2) %>% head(3)
```

추가로, 해당 연도가 윤달이 있는 연도인지 확인할 수 있는 `leap_year()`, 서머 타임이 있는 날인지 확인할 수 있는 `dst()` 등이 지원됩니다. 


## **날짜형 데이터 연산 : 기간(period), 지속(duration), 간격(interval)**

**lubridate**는 날짜형 데이터의 연산 또한 지원합니다. 일정 기간이나 간격을 갖는 날짜형 데이터의 index를 만들어야 하는 경우 특히 도움이 됩니다. **lubridata**의 사용을 다루고 있는 [R for science의 time span](https://r4ds.had.co.nz/dates-and-times.html#time-spans)에서는 3개의 class로 시간 간격을 세부 구분하고 있습니다. 

- durations : **초** 단위의 정확한 간격
- periods : **주** 혹은 **월** 같이 흔히 사용하는 시간 간격
- intervals : **시작**과 **끝**으로 정의되는 간격

각 class 마다 사용되는 함수가 조금 다르니 하나하나 살펴보도록 하겠습니다. 

### **Durations : 초단위의 정확한 간격**

class **durations**은 날짜형 데이터, 연월일-시분초로 이뤄진 데이터를 **초** 단위로의 변환을 지원합니다. 따라서 **duration**을 이용하면 여러 날짜형 데이터 사이의 간격을 **초**로 구할 수도 있습니다. **초** 단위의 간격은 약물에 의한 실험이나 물리 실험 등 정밀한 측정이 필요한 경우에 사용할 수 있습니다. 

class **duration**의 기본 함수는 `duration()`이지만 편의를 위해 준비된 `**d**날짜형 데이터의 요소()`를 보통 사용합니다. 아래의 예제 코드를 보면 쉽게 이해하실 수 있으실 겁니다. 

```{r}
# d-series function 
# dseconds : arg를 n초로 받아서 초 단위로 반환
dseconds(1.1)

# dminutes : arg를 n분으로 받아서 초 단위로 반환 
dminutes(c(10, 30.3))

# dhours : arg를 n시간으로 받아서 초 단위로 반환
dhours(10)

# ddays : arg를 n일으로 받아서 초 단위로 반환 
ddays(seq(1, 5, 0.5)) 

# dwweeks : arg를 n주로 받아서 초 단위로 반환
dweeks(0:10)

# dmonths : arg를 n월로 받아서 초 단위로 반환
dmonths(2.2)

# dyears : arg를 n년으로 받아서 초 단위로 반환
dyears(1.2)

# class duration의 기본형, duration
duration(5, unit = "years") # dyears(5)와 같은 결과
```
결과로 보시는 것처럼 class duration에 속하는 함수들의 기본 return은 초 단위로 변환된 날짜형 데이터입니다. arg로 들어온 단위가 초 보다 큰 경우는 의미 전달을 위해 더 큰 단위로 나타납니다. 

더 큰 단위로 변환된 값을 지우고 싶으시면 `@.Data`로 초 단위로 변환된 값만 불러올 수 있습니다. 그러나 `@.Data`로 불러온 값은 더 이상 class duration가 아닌 숫자형 데이터로 변환되니 주의하시길 바랍니다. 

```{r}
# 0.5개월 단위로 1개월부터 50개월까지 초 단위로 변환된 duration 생성
months_1_50 <- dmonths(seq(1, 50, 0.5))

# class duration의 class 확인
class(months_1_50)

# class duration으로의 tibble
as.tibble(months_1_50) %>% head(3)

# class duration이 아닌 숫자형 데이터로서의 tibble
as.tibble(months_1_50@.Data) %>% head(3)
```

class duration에 속한 함수들과 실수를 이용한 연산 또한 지원합니다. 

```{r}
2 * dyears(4) # 8년에 해당하는 초 단위 값

dyears(20) + dmonths(1) + dweeks(3) + ddays(10) # 20년 1개월 3주 10일에 대한 초 단위 값 
```

duration을 이용한 날짜형 데이터의 연산은 아래와 같은 문제를 보이기도 합니다. 

```{r}
`160312` <- ymd_hms("2016-03-12 13:00:00", tz = "America/New_York")

`160312`

`160312` + dhours(23)

`160312` + ddays(1)
```
하루가 더해진 것이 아니라 하루 + 1시간이 더 더해졌음을 결과로부터 볼 수 있습니다. 이유는 타임 존이 바뀌었기 때문인데, `160312`의 타임존은 `"EST"`지만 ` `160312` + ddays(1) ` 의 타임존은 `"EDT"`입니다. 

`"EST"`는 미국 동부 표준시간대를, `"EDT"`는 서머타임이 적용된 미국 동부 표준시간대를 의미하므로, 16년 3월 13일은 서머타임이 적용되는 시간대이므로 서머타임이 적용되지 않는 12일에 하루, 즉 24시간을 더하면 서머타임이 적용되는 시간대에서는 **하루 + 1시간**이 되는 것입니다.  

서머타임이 없는 한국에서는 조금 낯선 개념이지만 역시나 알아두면 좋은 개념이라 소개해드렸습니다. 

```{r}
# 서머 타임을 해결하기 위한 조악한 함수
summer_time <- function(arg){
  
  date <- arg
  
  if (dst(date + ddays(1)) == TRUE) {
    result <- date + dhours(23)
  } 
  else {
    result <- date + ddays(1)
  }
  
  return(result)
}

summer_time(`160312`)
summer_time(ymd_hms("2016-03-11 13:00:00", tz = "America/New_York"))
```

### **Periods : 주와 월 같이 흔히 쓰는 시간 간격 **

**lubridate**에서 class **periods**는 사람들이 흔히 사용하는 시간 간격을 의미합니다. 따라서 이해하기도 훨씬 편하고 함수의 이름도 직관적입니다. 함수의 형태는 이전에 보았던 **duration**과 같습니다. 

```{r}
# periods의 기본 함수, period
period(10, units = "months")

years(10)
months(c(3, 5))
weeks(seq(1, 10, 1))
days(seq(1, 10))
hours(20)
minutes(50)
seconds(1)
```

앞서 본 **duration**과 크게 다르지 않은 용법입니다. 사소한 차이가 있다면 **duration**에서는 `seq()`의 간격으로 소수를 줄 수 있었지만 **period**에서는 정수만 가능합니다. 

class 또한 `"Period"`를 가지며 `str()`로 객체를 살펴보면 `days()`로 생성한 객체라도 모든 요소에 공간을 가지고 있음을 볼 수 있습니다. 

```{r, error = TRUE}

days(seq(1, 10, 0.5)) # error

`1_10_days` <- days(seq(1, 10, 1))
class(`1_10_days`)
str(`1_10_days`)
```

class **period**를 이용한 연산도 가능합니다. 

```{r}
years(5) + months(10) + hours(12)

days(seq(1,10,1)) + hours(12)

3*(minutes(seq(1, 30, 1)) + seconds(30))
```
앞서 서머타임에서 발생하는 duration을 이용한 연산의 문제점을 보셨습니다. class period를 이용한 연산은 서머타임과 윤년을 감안한 계산을 지원합니다. 
 
 
```{r}
# 서머 타임
`160312` + days(1)
`160312` + ddays(1)

# 윤년
`191231`<- ymd("2019-12-31")
`191231` + years(1) 
`191231` + dyears(1) # 2020년은 윤년이 포함된 해라 dyear(1)로 계산하면 20년 12월 30일이 나온다. 
```

### **intervals : 시작과 끝으로 정의되는 간격**

마지막으로 class **interval**입니다. **interval**은 고유한 연산자, `%--%`로도, `interval()`로도 구할 수 있는데 그 형태가 신기합니다. 

```{r}
interval(ymd("2020-01-01"), ymd("2020-12-31"))
ymd("2020-01-01") %--% ymd("2020-12-31")
```
class interval은 **간격의 시간**을 의미하는 것이 아니라 **간격 그 자체**를 저장한 것입니다. 즉, 시작과 끝의 정보를 가지고 있는 것이죠. 간격의 시간을 구하기 위해서는 또 다른 작업이 필요합니다. 

```{r}
interval <- ymd("2020-01-01") %--% (ymd("2020-01-01")+years(1))

# days와 ddays는 같은 결과
# 윤달이 포함되어 있기 때문에 366일이다. 
interval / days(1) 
interval / ddays(1)

# seconds와 dseconds는 같은 결과
# 366일 * 60초
interval / seconds(1) 
interval / dseconds(1)

# weeks와 dweeks는 같은 결과
# 366일 / 7일
interval / weeks(1) 
interval / dweeks(1)

# months와 dmonths는 다른 결과
interval / months(1) # 12
interval / dmonths(1) # 12.02464
```
```{r}
# 윤년이 아닌 경우
interval <- ymd("2021-01-01") %--% (ymd("2021-01-01")+years(1))
interval / months(1) # 12
interval / dmonths(1) # 11.99179
```
간격을 구하기 위해선 위의 예시처럼 기준이 되는 시간으로 interval을 나눠 주어야 합니다. `months()`와 `dmonths()`의 결과에 차이가 나는 이유는 duration이 초 단위의 시간을 기준으로 하기 때문으로 보입니다만 정확한 것은 아닙니다. 

class inverval을 이용한 여러 함수들을 소개해드립니다. 

```{r}
dt <- ymd("2020-01-01")
interval_a <- ymd("2020-01-01") %--% (ymd("2020-01-01")+years(1))
interval_b <- ymd("2020-06-01") %--% (ymd("2020-06-01")+years(1))

# interval의 시작과 끝을 반환하는 int_start, end
int_start(interval_a)
int_end(interval_a)

# 해당 날짜형 데이터가 interval 안에 속하는지 여부를 판단하는 %with%
ymd("2020-05-05") %within% interval_a

# 두 interval의 시작이나 끝이 중복되는지 알아보는 int_aligns
int_aligns(interval_a, ymd("2020-01-01") %--% (ymd("2020-01-01")+months(6)))

# 두 interval의 간격이 겹치는지 여부를 알아보는 in_overlaps
int_overlaps(interval_a, interval_b)

dt_vector <- c(dt, dt + 1, dt + 10, dt + 100)
# 날짜형 데이터로 이뤄진 벡터를 interval로 연결하는 함수, int_diff
int_diff(dt_vector)

# interval의 시작과 끝 시점을 서로 바꾸는 int_flip
int_flip(interval_a)

# interval의 시작과 끝 시점을 다시 바꾸는 int_standardize 
int_standardize(int_flip(interval_a))

# interval의 길이를 초 단위로 반환하는 int_lenght
int_length(interval_a)

# interval의 시작과 끝에서 일정 시간을 조정할 수 있는 int_shift
int_shift(interval_a, days(+10)) # 10일을 더하기
int_shift(interval_a, months(-1)) # 1개월을 빼기
```

### **duration, period, interval의 요약**
[**lubridate** 치트 시트](https://rawgit.com/rstudio/cheatsheets/master/lubridate.pdf)를 토대로 3개의 class를 비교 및 요약해보겠습니다. 

```{r}
# 비교를 위한 예제 데이터
normal_date <- ymd_hms("2020-05-05 06:30:00", tz = "Asia/Seoul")
start_st <- ymd_hms("2018-03-11 01:30:00",tz="US/Eastern")
end_st <- ymd_hms("2018-11-04 00:30:00",tz="US/Eastern")
leap <- ymd("2019-03-01")
```
class **period**는 마치 시계처럼 설정된 그대로의 값을 적용합니다. 서머타임이나 윤년과 같은 불규칙적인 시간 변동을 무시합니다. 

```{r, collapse=FALSE}
normal_date + minutes(90)
start_st + minutes(90)
end_st + minutes(90)
leap + years(1)
```
class **duration**은 물리적인 시간을 나타내므로 서머타임이나 윤년과 같은 불규칙적인 시간 변동에 취약한 모습을 보입니다. 

```{r, collapse=FALSE}
normal_date + dminutes(90)
start_st + dminutes(90)
end_st + dminutes(90)
leap + dyears(1)
```
class **interval**은 시작과 끝을 갖는 간격을 의미하며 시작과 끝에 period나 duration의 사용 여부에 따라 각 class의 장단점을 그대로 갖습니다.
```{r}
interval(normal_date, normal_date + minutes(90))
interval(start_st, start_st + minutes(90))
interval(end_st, end_st + minutes(90))
interval(leap, leap + years(1))
interval(leap, leap + dyears(1))
```
period와 duration에 대한 첨언을 하자면, 일상생활에서 20년 3월 1일 이후 **1년**이라고 하면 21년 3월 1일을 생각하지 "20년은 윤년이니까 365일을 더한 21년 2월 28일을 말하는 건가?"라고 생각하지 않는게 보통일겁니다. 여기서 21년 2월 28일이라고 답하는 것이 duration이고 21년 3월 1일이라고 답하는 것이 period입니다. 

따라서 많은 경우, period를 사용하시는 것을 권장드리며 정밀한 시간 index가 필요한 경우에 duration 사용을 권해드립니다. 


## **조금 더 알아보기 : 날짜형 데이터의 반올림과 타임 존**
날짜형 데이터는 연산 가능하므로 올림, 반올림, 내림과 같은 처리도 가능합니다. 또한 이 포스트에서 계속 나온 **lubridate**의 타임 존(time zone)에 대해서도 간단히 다뤄보겠습니다. 

날짜형 데이터의 올림, 반올림, 내림은 순서대로 `ceiling_date()`, `round_date()`, `floor_date()`를 사용해 처리할 수 있습니다. 필수 파라메터는 대상이 될 날짜형 데이터를 넣는 `x`, 자리나 기준치를 설정하는 `unit`로 3개의 함수 모두 동일합니다. 

```{r, collapse=TRUE}
normal_date <- ymd_hms("2020-06-05 04:29:58.5", tz = "Asia/Seoul")

# round_date()의 예시
# ceiling_date, floor_date도 같은 방식으로 작동
round_date(normal_date, unit = "second")
round_date(normal_date, unit = "minute")
round_date(normal_date, unit = "hour")
round_date(normal_date, unit = "day")
round_date(normal_date, unit = "month")

round_date(ymd_hms("2020-01-01 00:00:00", tz = "Asia/Seoul"), unit = "day")
```

`ceiling_date()`의 경우, `change_on_boundary` 옵션을 하나 더 가지고 있습니다. `change_on_boundary`는 **올림**이 시작되는 기준점에 대한 옵션으로 이를 이해하려면 날짜형 데이터가 어떻게 반올림이 되는지 먼저 알아봐야 합니다. 이 내용은 [Round, floor and ceiling methods for date-time objects](https://lubridate.tidyverse.org/reference/round_date.html#rounding-up-date-objects)에서 보실 수 있습니다. 

- 날짜형 데이터 `"2020-01-01"`이 함수의 arg로 지정되었다고 했을 때, `"2020-01-01 00:00:00"`의 인스턴스로 변환되어 하계(lower bound)로 정의됩니다. 

- 설정된 `"unit"`에 의해 상계(upper bound)가 정의됩니다. 가령, `unit = "day"`라면 상계는 `"2020-01-02 00:00:00"`가 될 것입니다. 문제는 `"2020-01-01"`이라는 **하루**가 개념적으로 interval, `"2020-01-01 00:00:00 -- "2020-01-02 00:00:00"`을 갖지만 엄밀한 의미에서 **하루**는 `"00:00:00"`, 그러니까 `0시 0분 0초`부터 시작하지 않는다는 것입니다. 따라서 `0시 0분 0초`을 하계로 정의해서 하루를 올림하는 것은 적절하지 않아보입니다. 

- 이 문제를 해결하기 위해 `change_on_boundary` 옵션에 `TRUE`값을 주면 됩니다. `change_on_boundary = TRUE`의 의미는 $$min \{n~\in~Z : n \ge x \}$$를 $$min \{n~\in~Z : n > x \}$$로 [바꾸는 것](https://github.com/tidyverse/lubridate/issues/443)입니다. 

위 함수는 [천장 함수](https://ko.wikipedia.org/wiki/%EB%B0%94%EB%8B%A5_%ED%95%A8%EC%88%98%EC%99%80_%EC%B2%9C%EC%9E%A5_%ED%95%A8%EC%88%98)로 자세한 설명은 링크를 참조하시길 바랍니다. 

말이 지나치게 어려우니 예제를 보며 문제점이 무엇인지 알아보겠습니다. 

```{r, collapse=TRUE}
# 20년 1월 1일을 day 기준으로 올림하면? 
ceiling_date(ymd("2020-01-01"), "day")

# 똑같이, "2020-01-01 00:00:00"을 day 기준으로 올림하면?
ceiling_date(ymd_hms("2020-01-01 00:00:00"), "day")

# change_on_boundary = TRUE를 이용해서 수정
ceiling_date(ymd_hms("2000-01-01 00:00:00"), "day", change_on_boundary = TRUE)
```

사실 저도 이 포스트를 통해 날짜형 데이터에 대한 반올림을 처음 접해봐서 신기하기도, 이상하기도 합니다. 간단히 알아보려고 했는데 꽤 길어졌습니다. 다음으로 타임 존에 대해 알아보겠습니다.

타임 존이란 지역 시간대를 갖는 고유의 영역을 말합니다. 타임 존의 차이는 흔히 말하는 **시차**의 개념이기도 합니다. 지구 상에는 수 많은 타임 존이 존재하며 **lubridate**의 `OlsonNames()`로 알아볼 수 있습니다.

```{r, collapse=TRUE}
head(OlsonNames(), 3)
length(OlsonNames())
```
타임 존이 다른 여러 지역의 날짜형 데이터를 다룰 때, 보통은 서머타임을 피하기 위해 혹은 단위 통일을 위해 협정 시계시(UTC)를 사용합니다. 타임 존과 관련된 함수, `with_tz()`와 `force_tz()`, 두 가지를 알아보겠습니다. 

```{r, collapse=TRUE}
seoul_date <- ymd_hms("2020-08-15 12:30:45", tz = "Asia/Seoul")

with_tz(seoul_date, tzone = "UTC")
force_tz(seoul_date, tzone = "UTC")
```
결과를 보시면 두 함수의 차이를 아실 수 있으실겁니다. `with_tz()`는 설정된 타임 존으로 지정된 날짜형 데이터의 타임존과 시간을 바꿉니다. 여러 타임 존의 날짜형 데이터를 한 타임 존으로 통일하기 위해서 사용하실 수 있는 함수입니다. 

`force_tz()`는 날짜형 데이터의 시간 값은 그대로 둔 채, 타임 존만 바꾸는 함수입니다. `with_tz()`보다는 쓰임이 적지만 오류 등으로 시간은 제대로 입력되었으나 타임존이 잘 못 설정되었을 때 사용할 수 있습니다. 

여기까지 **lubridate**를 이용한 날짜형 데이터 핸들링을 알아보았습니다. 날짜형 데이터는 고유한 class를 갖는다는 점에서 조작하기 다소 까다로운 측면이 있어 어떻게 다루는 지 알아두셔야 하는 데이터라고 생각합니다. 다소 복잡하고 지루한 내용이었지만 도움이 되었길 바랍니다.  

# **Summary** 

날짜형 데이터 핸들링을 지원하는 **lubridate**에 대해 알아보았습니다. 포스트를 크게 세 등분하여 1) 날짜형 데이터 변환 및 생성, 2) 날짜형 데이터를 이루는 요소 다루기(component handling), 3) 날짜형 데이터 연산 : 기간(period), 지속(duration), 간격(interval)의 순서로 정리했습니다. 

`parse_date_time()`와 같이 날짜형 데이터를 변환할 수 있는 혹은 만들 수 있는 범용 함수는 꼭 알아두시길 바랍니다. 또한, **lubridate**에서 지원하는 3개의 class, period, duration, interval의 특징과 쓰임도 알아두시면 데이터 핸들링에 도움이 되실 거라 생각합니다. 마지막으로 타임 존은 많이 쓰이진 않지만 날짜형 데이터의 시간 부분을 이루는 핵심적인 개념 중 하나이므로 `with_tz()`는 꼭 기억해두시길 바랍니다. 


저는 또 다른 포스트로 찾아뵙겠습니다. 감사합니다.

# **Reference**


- [lubridate main page](https://lubridate.tidyverse.org/index.html)

- [lubridate CHEAT SHEET](https://rawgit.com/rstudio/cheatsheets/master/lubridate.pdf)

- [lubridate : Function reference](https://lubridate.tidyverse.org/reference/index.html)

- [hms main page](https://hms.tidyverse.org/index.html)

- [R for science : 16 Dates and times](https://r4ds.had.co.nz/dates-and-times.html)

- [데이터 과학 : 시간 데이터 기초](https://statkclee.github.io/data-science/ds-date-basics.html)

- [R에서 lubridate package 에 대해](https://lovetoken.github.io/r/2016/09/18/lubridate_package.html)
