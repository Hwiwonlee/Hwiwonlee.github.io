---
title: "Tibble 그리고 data.frame"
author: "Hwiwon Lee"
date: "`r format(Sys.Date())`"
summary : "Tibble pacakge를 이용한 tibble 생성 및 data.frame과의 비교"
categories:
  - tidyverse
tags:
  - R
  - tidyverse
  - tibble
output: 
  # https://blog.zarathu.com/posts/2019-01-03-rmarkdown/
    bookdown::html_document2:
      number_sections: FALSE
      fig_caption: TRUE
      fig_height: 6
      fig_width: 10
      highlight: textmate
      theme: cosmo
      toc: yes
      toc_depth: 4
      toc_float: yes
      css: "post_style.css"
# https://stackoverflow.com/questions/535616/can-css-choose-a-different-default-font-and-size-depending-on-language
---



```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.height = 8, fig.align = "center", cache=T, dpi = 300, dev = "png",
                      comment = "#>")

# https://tibble.tidyverse.org/reference/formatting.html
options(tibble.print_max = 10)
options(tibble.max_extra_cols = 5)
# options(max.print = 300)

library(knitr) # for include_graphics()
library(tidyverse) # as you known, core package
library(googledrive) # Import dataset from the google drive
library(readr) # To read csv file
```

# **Tibble과 data.frame**

[**Tidyverse**](https://www.tidyverse.org/)는 **tibble 패키지**를 통해 **tibble**이라는 데이터셋 형태를 지원합니다. **tibble**은 우리가 일반적으로 사용하고 있는 데이터셋 형태, **data.frame**과 크게 다르지 않으며 그래서 인지 R을 활용하는 많은 데이터 분석가들은 **tibble**과 **data.frame**을 엄격히 구분하지 않습니다. 오늘은 **tibble**이란 무엇이며 **data.frame**과 어떻게 다른지에 대해 얘기해보겠습니다. 

본론에 앞서 한가지 명확히 해야할 것은 **tibble**의 특성을 설명하기 위해 **tibble**과 **data.frame**을 구분할 것이지만 **tibble**과 **data.frame**은 서로 다른 데이터셋 유형이 아니라는 점입니다. **data.frame**의 사용에 있어서 아쉬운 부분을 개선한 것이 **tibble**이라고 생각하시면서 본론을 봐주시길 바랍니다. 


# **Tibble의 특성**

`tibble()`을 다루고 있는 [**Build a data frame**](https://tibble.tidyverse.org/reference/tibble.html)과 **tibble**의 중요한 요소인 tbl_df를 다루고 있는 [tbl_df class](https://tibble.tidyverse.org/reference/tbl_df-class.html)에서 **tibble**과 **data.frame**의 차이를 다음과 같이 서술하고 있습니다. 

- `tbl_df` 클래스를 가진 **data.frame**을 **tibble**로 정의한다.

- 열 데이터의 형태를 강제하지 않는다. 가령, 문자열로된 열 데이터를 factor형으로 강제 변경하지 않는다.

- **Recyling**은 길이 1의 input에서만 발생한다.[`vctrs::vec_recycle()`](https://vctrs.r-lib.org/reference/vec_recycle.html)에 자세한 내용이 있다.
 
- 저장된 변수(variable)을 tibble 생성에 사용할 수 있다. 

- 누락된 열 이름은 자동으로 채워지지만 열 이름이 삭제되는 경우는 없다. 비어져 있거나 중복되는 열 이름으로 인해 실행되지 않을 수 있으니 이에 대한 해결 방법을 arg로 설정 해야 한다. [`vctrs::vec_as_names()`](https://tibble.tidyverse.org/reference/tbl_df-class.html)에 자세한 내용이 있다. 

- 행 이름을 가질 수 없다. 자세한 내용은 [rownames](https://tibble.tidyverse.org/reference/rownames.html)를 참고 바란다. 

- `df[, j]`는 똑같이 tibble형태로 반환되며 벡터 형태로 반환되지 않는다. `df[, j, drop = FALSE]`가 디폴트다. 자세한 내용은 [subsetting](https://tibble.tidyverse.org/reference/subsetting.html)을 참고 바란다. 

- `$`를 사용한 열 이름 인덱싱에서 존재하지 않는 열 이름을 사용했을 경우 `NULL`이 반환된다. 자세한 내용은 [subsetting](https://tibble.tidyverse.org/reference/subsetting.html)을 참고 바란다. 

- 출력과 검토는 **tibble의 핵심**이다. 크고 복잡한 데이터셋이라도 간결하게 최대한 많은 정보를 전달하고자 고안된 것이 tibble이다. [formatting](https://tibble.tidyverse.org/reference/formatting.html)에 이와 관련된 자세한 내용이 있다. 


**tibble**의 정의에서 보신대로 **tibble** 또한 큰 범위에서는 **data.frame**이며 위에 보신 몇 가지 차이점을 갖고 있습니다. 그럼 이제 좀 더 자세히, **tibble**의 특성을 **data.frame**과 비교하면서 알아보겠습니다. 


## **`tbl_df` class**
**R은 객체지향 프로그래밍 언어**(Object-Oriented Programming language, OOP)입니다. 따라서 데이터 분석에 핵심이 되진 않지만 알아두면 R을 이해하는데 좋은 프로그래밍 개념들이 종종 등장합니다. **class** 또한 그런 개념입니다. 사실 저도 프로그래머는 아니기 때문에 깊게 설명하기 어려우니 간단하게만 짚고 넘어가겠습니다.

보통 객체지향 프로그래밍에서 **class**라 함은 **붕어빵 틀**로 비유되곤 합니다. **객체**(object)는 **붕어빵**으로 비유됩니다. **붕어빵 틀**없이 **붕어빵**을 만들어낼 수 없으니, **붕어빵 틀**을 만들고 **붕어빵**을 만들어야 합니다. 다시 말해, R을 사용해 **객체**를 만들어내기 위해 필요한 것이 **class**인 셈입니다. 

**class**는 **객체**가 꼭 가져야할 **속성**(attribute)을 정의한 틀입니다. 같은 **class**를 갖는 **객체**는 공통의 **속성**을 갖게 되므로 `tbl_df` class를 갖는 **객체**는 공통의 **속성**을 갖고 이를 **tibble**이라 정의하게 된 것입니다. `class()`로 tibble과 data.frame의 **class**를 확인해볼 수 있습니다. 

```{r}
class(tibble(x = 1, y = 2))
```
```{r}
class(data.frame(x = 1, y = 2))
```

- **객체**(object)란 [R을 이용해 생성하는 모든 것들을 통칭(The entities that R creates and manipulates are known as objects.)](https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Data-permanency-and-removing-objects)합니다. 

- **속성**(attribute)이란 **객체**가 가지고 있는 특성(property)을 의미합니다. R에서는 속성을 intrinsic와 non-intrinsic로 나누고 있으며 [intrinsic attribute은 type 혹은 mode로 정의되는 numeric, complex, logical, character, raw 등과 길이를 의미하는 length로, non-intrinsic attribute은 intrinsic attribute가 아닌 다른 모든 속성을 의미합니다.](https://cran.r-project.org/doc/manuals/r-release/R-intro.html#The-intrinsic-attributes-mode-and-length) **class** 또한 속성의 범주 안에 들어갑니다. `attributes()`로 객체의 속성을 확인해볼 수 있습니다. 

    ```{r}
    attributes(tibble(x = 1, y = 2))
    ```
    
    ```{r}
    attributes(data.frame(x = 1, y = 2))
    ```

### [**`tbl_df` class의 특성**](https://tibble.tidyverse.org/reference/tbl_df-class.html#properties-of-tbl-df)

`tbl_df` class의 객체는 다음과 같은 특성을 가집니다. 

- [`c("tbl_df", "tbl", "data.frame")`]()의 `class` attribute를 가진다. 
    - 이는 `class(tibble)`로 확인 가능한 내용입니다. 
    
- `"list"`의 base type을 가지며 list의 각 원소들은 [`vctrs::vec_size()`](https://vctrs.r-lib.org/reference/vec_size.html)와 같은 길이를 갖는다. 
    - `list`의 base type을 갖는다는 말은 **tibble의 list 타입으로 이뤄져 있다**는 의미입니다. 행과 열이 있는 데이터셋 형태에서 vector가 아닌 list 타입을 갖는다는 것이 조금 낯설게 느껴지실 수 있지만 사실 **data.frame**도 list type을 갖습니다. **tibble**과 **data.frame**은 vector, 다시 말해 column의 list로 말할 수 있습니다. 
    
    ```{r}
    tibble <- tibble(x = 1, y = 2)
    df <- data.frame(x = 1, y = 2)

    typeof(tibble[, 1])
    ```
    ```{r}
    typeof(df[, 1, drop=FALSE])
    ```
- 근본이 되는 list와 같은 길이를 갖는 문자열 벡터를 `names` attribute으로 갖는다. 
    - 쉽게 말해 tibble 타입인 list의 이름을 열 이름으로 갖는다는 의미입니다. 
    
- data.frame과 호환 가능한 `row.names` attribute를 갖는다. 이 속성은 행 번호만을 표시하며 저장된 행 이름은 대부분의 tibble 방법론에 의해 무시된다. 
    - tibble은 data.frame이 행 이름을 따로 갖을 수 있는 것과 달리 행 이름을 오직 행 번호로만 갖습니다. 간혹 table이나 plot을 만들 때 행 이름이 필요한 경우가 있는데 그때는 tibble보다는 data.frame을 사용하시는 것이 편리하실 수도 있습니다. 아니면 행 이름을 따로 객체로 저장해둔 후 tibble을 이용하셔도 됩니다. 
    ```{r}
    rownames(df) <- "test"
    df
    ```
    
    ```{r}
    rownames(tibble) <- "test"
    tibble
    ```

## **열 데이터의 type 보존**
이 부분은 **tibble**과 **data.frame**의 객체로써의 차이점이 아닌 `tibble()`과 `data.frame()`의 함수 실행에 대한 차이입니다. 

`data.frame()`은 문자열(character)을 factor로 바꾸는 특성이 **있었습니다.** `stringAsFactors`라는 paratemter를 default로 `TRUE` 세팅을 해놓았기 때문인데, `data.frame()`의 help 페이지에 보면 R 4.0.0부터 `FALSE`로 default 세팅이 변경되었다고 나와있습니다. 따라서, 이제 `data.frame()`도 문자열을 문자열로 두게 되었습니다. 필요에 따라 `data.frame()`의 `stringAsFactors`를 이용해 factor로의 변환을 쉽게 할 수 있습니다. 

`tibble()`은 input의 type을 바꾸지 않습니다. 따라서 문자열은 문자열로, 숫자형은 숫자형으로 저장되고 출력됩니다. 당연해보이지만 과거에는 `tibble()`과 `data.frame()`의 재미있는 차이점 중 하나였습니다. 

```{r}
str(as.data.frame(tibble(letters)))
```

```{r}
# R 4.0.0 이전의 data.frame()
str(data.frame(letters, stringsAsFactors = TRUE))
```

## **길이가 1인 input에 한하여 recycle**
이름에서 알 수 있듯, **recycle**이라는 개념은 value를 재활용한다는 의미입니다. R에서 recycle은 서로 다른 길이를 갖는 두 벡터간 연산이 수행될 때 자동으로 사용됩니다. [다음의 예제](https://www.oreilly.com/library/view/the-art-of/9781593273842/ch02s03.html)를 보시면 쉽게 이해하실 수 있으실 겁니다. 

```{r, warning=TRUE}
c(1,2,4) + c(6,0,9,20,22)
```

길이가 3인 벡터와 길이가 5인 벡터를 더했을 때, 짧은 쪽의 첫 번째, 두 번째 원소가 2번 사용한 것을 결과로 볼 수 있습니다. 

이런 recycle이 **tibble**과 **data.frame**을 만들 때도 사용되지만 `tibble()`은 길이가 1인 input에서만 recycle을 이용하고 `data.frame()`은 배수 관계가 성립되는 경우에 recycle이 적용되는 차이를 가집니다. 예제를 통해 설명드리겠습니다.

```{r}
# a. tibble
# a.a) recycle이 적용되는 tibble의 예제 
tibble(x = c(1), y = c(1,2,3,4))
```


```{r, error=TRUE}
# a.b) 배수 관계를 만족하나 recycle이 적용되지 않는 tibble()
tibble(x = c(1, 2), y = c(1,2,3,4))
```
```{r}
# b. data.frame
# b.b) recycle이 사용되는 data.frame의 예제
data.frame(x = c(1, 2), y = c(1,2,3,4))
```

```{r, error=TRUE}
# a.b) 배수 관계를 만족하지 않아 recycle이 사용되지 않는 data.frame()
data.frame(x = c(1, 2, 3), y = c(1,2,3,4))
```


## **저장된 변수(variable) 사용 여부**
`tibble()`은 생성시, `tibble()` 내부에서 정의된 변수를 사용할 수 있는 반면 `data.frame()`은 `data.frame()` 내부에서 정의된 변수를 사용할 수 없습니다. 편의성 부문의 차이이며 `data.frame()`도 `data.frame()` 바깥에서 정의된 변수라면 `data.frame()`에서 사용 가능합니다. 

- global variable를 생성하지 않고 local variable로 데이터셋을 생성할 수 있음은 변수 관리와 리소스 관리에서도 효율적입니다. 다만, 대용량의 데이터 생성에만 체감될 뿐, 소규모의 데이터 생성에서 큰 차이는 없습니다. 

```{r}
tibble(x = c(1, 2, 3), 
       y = c(10, 100, 1000),
       z = x * y)
```

```{r, error = TRUE}
data.frame(x = c(1, 2, 3), 
           y = c(10, 100, 1000),
           z = x * y)
```
```{r}
# x와 y를 data.frame 바깥에서 정의하고 data.frame 내부에서 사용하는 예
x = c(1, 2, 3)
y = c(10, 100, 1000)
data.frame(x = x, 
           y = y,
           z = x * y)
```

## **Subsetting**
Subsetting이란 전체 데이터셋에서 특정 부분을 추출해내는 것을 말합니다. Subsetting 방법에서 **tibble**과 **data.frame**은 큰 차이를 보입니다. 
[Subsetting tibbles](https://tibble.tidyverse.org/reference/subsetting.html)에 나온 내용을 정리 및 보충해보겠습니다. 

- tibble을 `[ ]`로 subsetting할 경우, default setting에 의해 **tibble**로 return됩니다. **data.frame**의 경우, `[ ]`로 subsetting시, 1개의 열은 vector로, 2개 이상의 열은 data.frame의 형태로 return됩니다. 

    ```{r}
    # 예제 데이터
    tibble <- tibble(x = c(1,2,3), y = c(4,5,6), zcolumn = c(7, 8, 9))
    df <- data.frame(x = c(1,2,3), y = c(4,5,6), zcolumn = c(7, 8, 9))
    ```
    
    ```{r}
    # a. tibble의 경우
    tibble[, 1]
    tibble[, 1:2]
    ```
    ```{r}
    # b. data.frame의 경우
    df[, 1]
    df[, 1:2]
    ```
- **data.frame**은 `$`나 `[[ ]]`를 사용한 subsetting에서 열 이름에 대한 partial matching을 지원하지만 **tibble**은 열 이름이 완전히 일치해야 한다. 
    - partial matching이라 하지만 보통 첫글자를 통한 열 이름 매칭이 이뤄집니다. `z`열이 없지만 `$z`를 이용한 subsetting의 결과를 보시면 이해하실 수 있으실 겁니다. 
    ```{r}
    # data.frame의 경우, z열이 없지만 첫 글자가 같은 zcolumn을 출력
    # df[["z", exact = FALSE]] # 와 같은 결과
    df$z
    
    # tibble은 일치하는 열이 없다는 의미의 NULL 출력
    tibble$z
    ```

- 스칼라 (길이가 1 인 벡터) 또는 행 수와 길이가 같은 벡터만 subsetting에 사용할 수 있다. 

- **tibble**의 행 범위를 초과하는 행 번호를 사용할 수 없다. 

- `[[ ]] <-`나 `[ ] <-`를 통해 값을 바꿀 때, 열에 대한 타입을 바꿀 수 있도록 지원한다. 그러나 열의 부분만 업데이트하는 경우에는 새로운 값의 타입이 기존의 값의 타입으로 강제 변환된다. 


## **Printing**
사실 가장 도드라지는 차이점은 **data.frame**과 **tibble**의 print 형태입니다. **tibble**은 행과 열의 크기, 열을 구성하고 있는 데이터 타입 등을 함께 보여주어 데이터셋의 대략적인 형태를 파악할 수 있게 돕습니다. 이에 반해 **data.frame**은 행, 열 이름, 데이터 값 정도의 기본적인 사항만 전달해줍니다. 


# **Summary**
지금까지 **tidyverse**에서 지원하는 **tibble**에 대해 알아보았습니다. 기본적으로 많이 사용하는 **data.frame**과 큰 차이는 없지만 printing이나 subsetting 더불어 변수를 따로 저장하지 않고 **tibble**을 생성할 수 있는 등의 특징을 가집니다. 다만 행 이름을 표기하지 않거나 recycle이 길이 1인 경우에만 이뤄지는 등의 사용하기에 다소 불편할 수 있는 특징도 있기 때문에 **tibble**과 **data.frame**의 우열을 가릴 수는 없습니다. 

따라서 데이터 분석가의 상황과 필요에 따라 적절한 데이터셋 형태를 사용하는 것이 권장되며 이 글이 그 선택에 작은 도움이 되었길 바랍니다. 
